--[[--
AltusDenoiser.fuse - v1.0 2018-09-05 01.10 PM
By Andrew Hazelden <andrew@andrewhazelden.com>

This fuse uses the Altus Denoiser CLI (command line interface) to reduce the noise in V-ray pathtracer rendered EXR imagery.

The Altus Denoiser CLI software is available for purchase on the Innobright website:

https://www.innobright.com/about-altus/

The AltusDenoiserUltra fuse is compatible with Fusion 9.0.2. The Reactor provided SwitchElse fuse is required.

## Vray for Maya Render Channels ##

In order to use thise fuse, Altus expects you to have rendered a pair of buffer 0 (b0) and buffer 1 (b1) images that have fixed noise sampling patterns enabled. By having the seed value for the fixed noise sampling set at two different settings for the b0 and b1 images, Altus is able to more accuratly target the multi-channel noise reduction where it is required.

Altus requires the following EXR image channels to be enabled in V-Ray's render settings:

- rgb
- DiffuseFilter
- MatteShadow
- Reflection
- WorldNormals
- WorldPositions

The fastest way to generate these render elements is to turn on the V-Ray "vrayRE_Denoiser" and "vrayRE_Matte_shadow" render elements.

## Vray for Maya Fixed Noise Sampling ##

The Altus Buffer 0 Vray for Maya MEL setting is:

	setAttr "vraySettings.dmcs_timeDependent" 0;
	setAttr "vraySettings.dmcs_randomSeed" 0;"

The Altus Buffer 1 Vray for Maya MEL setting is:

	setAttr "vraySettings.dmcs_timeDependent" 0;
	setAttr "vraySettings.dmcs_randomSeed" 50000;"


## AltusDenoiserUltra Example Comp ##

An example Fusion comp file can be found at the "Reactor:/Deploy/Comps/AltusDenoiser/AltusDenoiserUltra.comp" filepath. This example composite includes a pair of V-Ray rendered b0 and b1 EXR images that you can use to learn how Altus works and test the DoD cropping and filter settings.

## Macro Usage ##

Step 1. Add the "AltusDenoiserUltra" macro to your comp. The macro's group is expanded by default so you can edit the settings.

Step 2. Relink your imagery into the b0 and b1 sets of Loaders on the far left side of the macro group's flow work area. If you are working with multi-part EXRs you can manually select which part you want to extract the image channels from manually on each of the loader nodes.

Step 3. Enable the HiQ rendering mode so the macro's embedded savers are able to interactivly render the individual multi-channel extracted exr image elements to the "Comp:/Media/altus_input" folder.

Step 4. Press the "Render" button to render an intial denoised output to the "Comp:/Media/altus_output" folder.

Step 5. Select the "AltusDenoiserUltra" macro and view its attributes in the Tools view. You can use the onscreen DoD crop handles to reduce the amount of processing Altus has to do down to a smaller cropped region.

Step 6. The "Output Mode" control lets you switch between viewing the original "Input Image", and the "Denoised Result". When the Output Mode is seto to "Input Image" you are able to use the "Buffer" ComboControl menu to switch between viewing B0 and B1. The "Channels" ComboControl menu lets you view each of the Altus formatted EXR image channels that were extracted from your V-Ray render elements.


## Notes ##

Altus is capable of denoising images from other production renderers like Mantra, Arnold, Maxwell Render, Mental Ray and RenderMan but it is outside the current focus and usage scope of this tool to try and implement support users of those renderers.

The "Processing Quality" should be set to the faster "Preview" setting when you are refining the settings. Once thinge are looking close to perfect you can switch the slower but cleaner "Production" setting to do a slightly better output quality. The [x] Firefly checkbox is useful for suppresing very small super bright artifacts that happen inside specular highlights in the rendered image.

--]]--

FuRegisterClass("AltusDenoiserCore", CT_Tool, {
	REGS_Name = "AltusDenoiserCore",
	REGS_Category = "Filter",
	
	REGS_OpIconString = "AltusCore",
	REGS_OpDescription = "This fuse uses the Altus Denoiser CLI (command line interface) to reduce the noise in V-ray pathtracer rendered EXR imagery.",
	REGS_Company = "Andrew Hazelden",
	REGS_URL = "http://www.andrewhazelden.com",
	REGS_HelpTopic = "http://www.andrewhazelden.com",

	-- Should the Edit and Reload buttons be hidden?
	REG_Fuse_NoEdit = false,
	REG_Fuse_NoReload = false,
	
	-- Should the current time setting be cached?
	REG_TimeVariant = true,
	
	REG_SupportsDoD = true,
	REG_OpNoMask = true,
	
	-- Sets the fuse version number (100 means v1.0) so newer fuses override older versions
	REG_Version = 100,
	})

function Create()
	-- B0 Input
	InImageB0RGB = self:AddInput("B0RGB", "B0RGB", {
		LINKID_DataType = "Image",
		LINK_Main = 1,
	})
	InImageB0WorldPositions = self:AddInput("B0WorldPositions", "B0WorldPositions", {
		LINKID_DataType = "Image",
		LINK_Main = 1,
	})
	InImageB0WorldNormals = self:AddInput("B0WorldNormals", "B0WorldNormals", {
		LINKID_DataType = "Image",
		LINK_Main = 1,
	})
	InImageB0MatteShadow = self:AddInput("B0MatteShadow", "B0MatteShadow", {
		LINKID_DataType = "Image",
		LINK_Main = 1,
	})
	InImageB0DiffuseFilter = self:AddInput("B0DiffuseFilter", "B0DiffuseFilter", {
		LINKID_DataType = "Image",
		LINK_Main = 1,
	})
	InImageB0Reflection = self:AddInput("B0Reflection", "B0Reflection", {
		LINKID_DataType = "Image",
		LINK_Main = 1,
	})
	
	-- B1 Input
	InImageB1RGB = self:AddInput("B1RGB", "B1RGB", {
		LINKID_DataType = "Image",
		LINK_Main = 1,
	})
	InImageB1WorldPositions = self:AddInput("B1WorldPositions", "B1WorldPositions", {
		LINKID_DataType = "Image",
		LINK_Main = 1,
	})
	InImageB1WorldNormals = self:AddInput("B1WorldNormals", "B1WorldNormals", {
		LINKID_DataType = "Image",
		LINK_Main = 1,
	})
	InImageB1MatteShadow = self:AddInput("B1MatteShadow", "B1MatteShadow", {
		LINKID_DataType = "Image",
		LINK_Main = 1,
	})
	InImageB1DiffuseFilter = self:AddInput("B1DiffuseFilter", "B1Diffuse Filter", {
		LINKID_DataType = "Image",
		LINK_Main = 1,
	})
	InImageB1Reflection = self:AddInput("B1Reflection", "B1Reflection", {
		LINKID_DataType = "Image",
		LINK_Main = 1,
	})

	-- Remove the default Controls tab
	self:RemoveControlPage('Controls')
	
	-- Add an Altus Controls tab
	self:AddControlPage('Altus')
	
	-- Add the Output Mode ComboControl above the tabs
	AltusOutputMode = self:AddInput("Output Mode", "AltusOutputMode", {
		LINKID_DataType = "Number",
		INPID_InputControl = "ComboControl",
		INP_Default = 0,
		INP_Integer = true,
		ICD_Width = 1,
		{ CCS_AddString = "Input Image" },
		{ CCS_AddString = "Denoised Result" },
		CC_LabelPosition = "Vertical",
		IC_ControlPage = -1,
		})
	
	AltusBuffer = self:AddInput("Buffer", "AltusBuffer", {
		LINKID_DataType = "Number",
		INPID_InputControl = "ComboControl",
		INP_Default = 0,
		INP_Integer = true,
		ICD_Width = 0.25,
		{ CCS_AddString = "B0" },
		{ CCS_AddString = "B1" },
		CC_LabelPosition = "Vertical",
		})
	AltusChannels = self:AddInput("Channels", "AltusChannels", {
		LINKID_DataType = "Number",
		INPID_InputControl = "ComboControl",
		INP_Default = 0,
		INP_Integer = true,
		ICD_Width = 0.75,
		{ CCS_AddString = "RGB" },
		{ CCS_AddString = "World Positions" },
		{ CCS_AddString = "World Normals" },
		{ CCS_AddString = "Matte Shadow" },
		{ CCS_AddString = "Diffuse Filter" },
		{ CCS_AddString = "Reflection" },
		CC_LabelPosition = "Vertical",
		})
	-- Quality - Preview vs Production
	AltusQuality = self:AddInput("Processing Quality", "AltusQuality", {
		LINKID_DataType = "Number",
		INPID_InputControl = "ComboControl",
		INP_Default = 0,
		INP_Integer = true,
		ICD_Width = 1,
		{ CCS_AddString = "Preview" },
		{ CCS_AddString = "Production" },
		CC_LabelPosition = "Vertical",
		})
	InVerbose = self:AddInput('Verbose Console Output', 'AltusVerbose', {
		LINKID_DataType = 'Number',
		INPID_InputControl = 'CheckboxControl',
		INP_DoNotifyChanged = true,
		INP_Integer = true,
		INP_Default = 0,
		ICD_Width = 1,
		})
	AltusRenderFrame = self:AddInput("Render Frame in Altus", "AltusRenderFrame", {
		LINKID_DataType = "Number",
		INPID_InputControl = "CheckboxControl",
		INP_Integer = true,
		INP_Default = 0.0,
		ICD_Width = 1.0,
	})
	AltusFirefly = self:AddInput("Firefly", "AltusFirefly", {
		LINKID_DataType = "Number",
		INPID_InputControl = "CheckboxControl",
		INP_Integer = true,
		INP_Default = 0.0,
		ICD_Width = 1.0,
	})
	Sep1 = self:AddInput(string.rep("_", 6852), "Separator1", {
		LINKID_DataType = "Text",
		INPID_InputControl = "LabelControl",
		INP_External = false,
		INP_Passive = true,
	})
	AltusFilterNest = self:AddInput('Altus Filters', 'AltusFiltersNest', {
		INPID_InputControl = 'LabelControl',
		LINKS_Name = 'Altus Filters',
		INP_DoNotifyChanged = true,
		INP_External = false,
		LBLC_DropDownButton = true,
		LBLC_NumInputs = 6,
		INP_Default = 1,
		IC_Visible = true,
	})
	AltusKC1 = self:AddInput("KC1", "AltusKC1", {
		INP_MaxAllowed = 20,
		INP_Integer = false,
		INPID_InputControl = "ScrewControl",
		INP_MaxScale = 20,
		INP_Default = 0.45,
		INP_MinScale = 0.001,
		INP_MinAllowed = 0.001,
		LINKID_DataType = "Number",
		ICD_Center = 1,
	})
	AltusKC2 = self:AddInput("KC2", "AltusKC2", {
		INP_MaxAllowed = 20,
		INP_Integer = false,
		INPID_InputControl = "ScrewControl",
		INP_MaxScale = 20,
		INP_Default = 0.45,
		INP_MinScale = 0.001,
		INP_MinAllowed = 0.001,
		LINKID_DataType = "Number",
		ICD_Center = 1,
	})
	AltusKC3 = self:AddInput("KC3", "AltusKC3", {
		INP_MaxAllowed = 20,
		INP_Integer = false,
		INPID_InputControl = "ScrewControl",
		INP_MaxScale = 20,
		INP_Default = 0.45,
		INP_MinScale = 0.001,
		INP_MinAllowed = 0.001,
		LINKID_DataType = "Number",
		ICD_Center = 1,
	})
	AltusKC4 = self:AddInput("KC4", "AltusKC4", {
		INP_MaxAllowed = 20,
		INP_Integer = false,
		INPID_InputControl = "ScrewControl",
		INP_MaxScale = 20,
		INP_Default = 0.45,
		INP_MinScale = 0.001,
		INP_MinAllowed = 0.001,
		LINKID_DataType = "Number",
		ICD_Center = 1,
	})
	AltusKF = self:AddInput("KF", "AltusKF", {
		INP_MaxAllowed = 20,
		INP_Integer = false,
		INPID_InputControl = "ScrewControl",
		INP_MaxScale = 20,
		INP_Default = 0.6,
		INP_MinScale = 0.001,
		INP_MinAllowed = 0.001,
		LINKID_DataType = "Number",
		ICD_Center = 1,
	})
	AltusRadius = self:AddInput("Radius", "AltusRadius", {
		INP_MaxAllowed = 20,
		INP_Integer = false,
		INPID_InputControl = "ScrewControl",
		INP_MaxScale = 20,
		INP_Default = 10,
		INP_MinScale = 1,
		INP_MinAllowed = 1,
		LINKID_DataType = "Number",
		ICD_Center = 1,
	})
	Sep2 = self:AddInput(string.rep("_", 6852), "Separator2", {
		LINKID_DataType = "Text",
		INPID_InputControl = "LabelControl",
		INP_External = false,
		INP_Passive = true,
	})
	OpenCompFolder = self:AddInput('Open Comp:/ Folder', 'OpenCompFolder', {
		LINKID_DataType = 'Number',
		INPID_InputControl = 'ButtonControl',
		INP_DoNotifyChanged = true,
		INP_External = false,
		INP_Default = 0.0,
		ICD_Width = 1,
		BTNCS_Execute = [[
------------------------------------------------------------------------
-- Add the platform specific folder slash character
osSeparator = package.config:sub(1,1)

-- Find out the current directory from a file path
-- Example: print(Dirname('/Users/Shared/file.txt'))
function Dirname(mediaDirName)
	return mediaDirName:match('(.*' .. osSeparator ..')')
end

-- Open a folder window up using your desktop file browser
function OpenDirectory(mediaDirName)
	dir = Dirname(mediaDirName)

	if not bmd.fileexists(dir) then
		print('[Create Directory] ', dir)
		bmd.createdir(dir)
	end
	
	if bmd.fileexists(dir) then
		print('[Open Directory] ', dir)
		bmd.openfileexternal('Open', dir)
	end
end

filename = comp:MapPath('Comp:/')
OpenDirectory(filename)
]],
		IC_Visible = true,
	})
	
	-- Rendering Nest on File tab
	InRenderNest = self:AddInput('Rendering', 'RenderingNest', {
		INPID_InputControl = 'LabelControl',
		LINKS_Name = 'Rendering',
		INP_DoNotifyChanged = true,
		INP_External = false,
		LBLC_DropDownButton = true,
		LBLC_NumInputs = 4,
		INP_Default = 1,
		IC_Visible = true,
	})
	-- Render Current Frame
	InRenderSelected = self:AddInput('Render Current Frame', 'RenderCurrentFrameButton', {
		LINKID_DataType = 'Number',
		INPID_InputControl = 'ButtonControl',
		INP_DoNotifyChanged = true,
		INP_External = false,
		INP_Default = 0.0,
		ICD_Width = 1,
		BTNCS_Execute = [[
if not tool then
	tool = comp.ActiveTool
end

-- Render Settings
local startFrame = comp.CurrentTime
local endFrame = comp.CurrentTime + 1
local hiQ = true
local motionBlur = 1
-- local proxy = -1 -- Custom (only used by PreviewSavers during a preview render)
local proxy = 0 -- Use prefs setting
-- local proxy = 1 -- Full Size (default)
-- local proxy = 2 -- Half Size
-- local proxy = 3 -- Third Size
-- local proxy = 4 -- Quarter Size
local stepBy = 1
local wait = true
local networkRender = false

if tool then
	print('[Altus Denoiser Ultra] Render Current Frame ' .. tool.Name)
	
	comp:Render({
		Tool = tool,
		Start = startFrame,
		End = endFrame,
		HiQ = hiQ,
		MotionBlur = motionBlur,
		SizeType = proxy,
		StepRender = stepBy,
		Wait = wait,
		UseNetwork = networkRender,
	})
else
	print('[Altus Denoiser Ultra] Selection Error - Please select a node before running this script.')
end]],
		IC_Visible = true,
	})
	-- Render Selected
	InRenderSelected = self:AddInput('Render Selected', 'RenderSelectedButton', {
		LINKID_DataType = 'Number',
		INPID_InputControl = 'ButtonControl',
		INP_DoNotifyChanged = true,
		INP_External = false,
		INP_Default = 0.0,
		ICD_Width = 1,
		BTNCS_Execute = [[
if not tool then
	tool = comp.ActiveTool
end

if tool then
	print('[Altus Denoiser Ultra] Render Selected ' .. tool.Name)
	comp:Render({Tool = tool})
else
	print('[Altus Denoiser Ultra] Selection Error - Please select a node before running this script.')
end]],
		IC_Visible = true,
	})
	-- Render All
	InRenderAll = self:AddInput('Render All Nodes', 'RenderAllButton', {
		LINKID_DataType = 'Number',
		INPID_InputControl = 'ButtonControl',
		INP_DoNotifyChanged = true,
		INP_External = false,
		INP_Default = 0.0,
		ICD_Width = 1,
		BTNCS_Execute = [[
print('[Altus Denoiser Ultra] Render All Nodes')
comp:Render()
]],
		IC_Visible = true,
	})
	-- Network Render All Nodes
	InNetworkRenderAll = self:AddInput('Network Render All Nodes', 'NetworkRenderAllButton', {
		LINKID_DataType = 'Number',
		INPID_InputControl = 'ButtonControl',
		INP_DoNotifyChanged = true,
		INP_External = false,
		INP_Default = 0.0,
		ICD_Width = 1,
		BTNCS_Execute = [[
-- Check if Resolve or Fusion is running
local fuHostPath = comp:MapPath('Fusion:/')
if string.lower(fuHostPath):match('resolve') then
	print('[Altus Denoiser Ultra] Network Rendering is not available in Resolve.')
else
	print('[Altus Denoiser Ultra] Network Render All Nodes')
	-- Render all the nodes on the network using the Fusion Render Manager window.
	comp:Render({UseNetwork = true})
	
	-- Show the Render Manager view
	fusion:ToggleRenderManager()
end
]],
		IC_Visible = true,
	})
	
	-- Add the Help tab
	self:AddControlPage('Help')
	
	-- Open the example Fusion Comp
	ExampleComp = self:AddInput('Open AltusDenoiserUltra.comp Example', 'ExampleComp', {
		LINKID_DataType = 'Number',
		INPID_InputControl = 'ButtonControl',
		INP_DoNotifyChanged = true,
		INP_External = false,
		INP_Default = 0.0,
		ICD_Width = 1,
		BTNCS_Execute = [[
------------------------------------------------------------------------
-- Open a .comp file using the OS default version of Fusion
platform = (FuPLATFORM_WINDOWS and 'Windows') or (FuPLATFORM_MAC and 'Mac') or (FuPLATFORM_LINUX and 'Linux')

function OpenURL(siteName, path)
	if platform == "Windows" then
		-- Running on Windows
		command = 'explorer "' .. path .. '"'
	elseif platform == 'Mac' then
		-- Running on Mac
		command = 'open "' .. path .. '" &'
	 elseif platform == "Linux" then
		-- Running on Linux
		command = 'xdg-open "' .. path .. '" &'
	else
		print('[Error] There is an invalid Fusion platform detected')
		return
	end
	os.execute(command)
	-- print('[Launch Command] ', command)
	print('[Opening URL] [' .. siteName .. '] ' .. path)
end

OpenURL('Opening AltusDenoiserUltra.comp', comp:MapPath('Reactor:/Deploy/Comps/AltusDenoiser/AltusDenoiserUltra.comp'))
]],
			IC_Visible = true,
			ICS_ControlPage = 'Help',
		})
	-- Show UI Manager Window
	InHelpWindow = self:AddInput('Show Fuse Help Window', 'HelpWindow', {
		LINKID_DataType = 'Number',
		INPID_InputControl = 'ButtonControl',
		INP_DoNotifyChanged = true,
		INP_External = false,
		INP_Default = 0.0,
		ICD_Width = 1,
		BTNCS_Execute = [[
-- Create a UI Manager dialog
function HelpWindow()
	-- Init UI Manager
	local ui = fu.UIManager
	local disp = bmd.UIDispatcher(ui)
	local width,height = 640,740
	local x = fu:GetMousePos()[1]
	local y = fu:GetMousePos()[2]

	-- Help Resources
	local URL = 'http://www.andrewhazelden.com'

	-- Build the new window
	win = disp:AddWindow({
		ID = 'HelpWin',
		TargetID = 'HelpWin',
		WindowTitle = 'Altus Denoiser Ultra Fuse Help Window',
		Geometry = {x-(width/2), y+8, width, height},
		Spacing = 10,

		ui:VGroup{
			ID = 'root',
			-- Add your GUI elements here:

			-- Add the main Message
			ui:TextEdit{
				ID = 'AboutText',
				ReadOnly = true,
				Alignment = {AlignHCenter = true, AlignTop = true},
				HTML = [=[
<h1>About AltusDenoiser Ultra</h1>
<h2>Version 1.0.4 -2018-08-02</h2>
<h2>Created by Andrew Hazelden &lt;andrew@andrewhazelden.com&gt;</h2>
<p>This fuse uses the Altus Denoiser CLI (command line interface) to reduce the noise in V-ray pathtracer rendered EXR imagery.</p>

<p>The Altus Denoiser CLI software is available for purchase on the Innobright website:<br>
https://www.innobright.com/about-altus/</p>

<p>The AltusDenoiserUltra fuse is compatible with Fusion 9.0.2. AltusDenoiserUltra requires the installation of the Reactor provided SwitchElse.fuse.</p>

<h2>Vray for Maya Render Channels</h2>

<p>In order to use thise fuse, Altus expects you to have rendered a pair of buffer 0 (b0) and buffer 1 (b1) images that have fixed noise sampling patterns enabled. By having the seed value for the fixed noise sampling set at two different settings for the b0 and b1 images, Altus is able to more accuratly target the multi-channel noise reduction where it is required.</p>

<p>Altus requires the following EXR image channels to be enabled in V-Ray's render settings:</p>

<ul>
	<li>rgb</li>
	<li>DiffuseFilter</li>
	<li>MatteShadow</li>
	<li>Reflection</li>
	<li>WorldNormals</li>
	<li>WorldPositions</li>
</ul>

<p>The fastest way to generate these render elements is to turn on the V-Ray "vrayRE_Denoiser" and "vrayRE_Matte_shadow" render elements.</p>



<h2>Vray for Maya Fixed Noise Sampling</h2>

<p>The Altus Buffer 0 Vray for Maya MEL setting is:</p>

<pre>
	setAttr "vraySettings.dmcs_timeDependent" 0;
	setAttr "vraySettings.dmcs_randomSeed" 0;"
</pre>


<p>The Altus Buffer 1 Vray for Maya MEL setting is:</p>

<pre>
	setAttr "vraySettings.dmcs_timeDependent" 0;
	setAttr "vraySettings.dmcs_randomSeed" 50000;"
</pre>



<h2>AltusDenoiserUltra Example Comp</h2>

<p>An example Fusion comp file can be found at the "Reactor:/Deploy/Comps/AltusDenoiser/AltusDenoiserUltra.comp" filepath. This example composite includes a pair of V-Ray rendered b0 and b1 EXR images that you can use to learn how Altus works and test the DoD cropping and filter settings.</p>



<h2>Macro Usage</h2>

<p>Step 1. Add the "AltusDenoiserUltra" macro to your comp. The macro's group is expanded by default so you can edit the settings.</p>

<p>Step 2. Relink your imagery into the b0 and b1 sets of Loaders on the far left side of the macro group's flow work area. If you are working with multi-part EXRs you can manually select which part you want to extract the image channels from manually on each of the loader nodes.</p>

<p>Step 3. Enable the HiQ rendering mode so the macro's embedded savers are able to interactivly render the individual multi-channel extracted exr image elements to the "Comp:/Media/altus_input" folder.</p>

<p>Step 4. Press the "Render" button to render an intial denoised output to the "Comp:/Media/altus_output" folder.<p>

<p>Step 5. Select the "AltusDenoiserUltra" macro and view its attributes in the Tools view. You can use the onscreen DoD crop handles to reduce the amount of processing Altus has to do down to a smaller cropped region.</p>

<p>Step 6. The "Output Mode" control lets you switch between viewing the original "Input Image", and the "Denoised Result". When the Output Mode is seto to "Input Image" you are able to use the "Buffer" ComboControl menu to switch between viewing B0 and B1. The "Channels" ComboControl menu lets you view each of the Altus formatted EXR image channels that were extracted from your V-Ray render elements.</p> 


<h2>Notes</h2>

<p>Altus is capable of denoising images from other production renderers like Mantra, Arnold, Maxwell Render, Mental Ray and RenderMan but it is outside the current focus and usage scope of this tool to try and implement support users of those renderers.</p>

<p>The "Processing Quality" should be set to the faster "Preview" setting when you are refining the settings. Once thinge are looking close to perfect you can switch the slower but cleaner "Production" setting to do a slightly better output quality. The &#91;x&#93; Firefly checkbox is useful for suppresing very small super bright artifacts that happen inside specular highlights in the rendered image.</p>
]=]
			},
			-- Add clickable links
			ui:VGroup{
				Weight = 0,

				ui:Label{
					ID = "URL",
					Text = 'Web: <a style="color: rgb(139,155,216)" href="' .. URL .. '">' .. URL .. '</a>',
					Alignment = {
						AlignHCenter = true,
						AlignTop = true,
					},
					WordWrap = true,
					OpenExternalLinks = true,
				},
			},
		},
	})

	function win.On.HelpWin.Close(ev)
		disp:ExitLoop()
	end

	function win.On.DoneButton.Clicked(ev)
		disp:ExitLoop()
	end
	
	-- The app:AddConfig() command that will capture the "Control + W" or "Control + F4" hotkeys so they will close the window instead of closing the foreground composite.
	app:AddConfig('HelpWin', {
		Target {
			ID = 'HelpWin',
		},

		Hotkeys {
			Target = 'HelpWin',
			Defaults = true,
			
			CONTROL_W = 'Execute{cmd = [=[app.UIManager:QueueEvent(obj, "Close", {})]=]}',
			CONTROL_F4 = 'Execute{cmd = [=[app.UIManager:QueueEvent(obj, "Close", {})]=]}',
		},
	})
	
	itm = win:GetItems()
	win:Show()
	disp:RunLoop()
	win:Hide()

	return win,win:GetItems()
end

-- Create a UI Manager dialog
HelpWindow()
]],
		IC_Visible = true,
		ICS_ControlPage = 'Help',
	})
	
		-- Altus Denoiser Ultra
	InHelpWebsite = self:AddInput('Innobrite Altus Denoiser CLI Website', 'HelpWebsite', {
		LINKID_DataType = 'Number',
		INPID_InputControl = 'ButtonControl',
		INP_DoNotifyChanged = true,
		INP_External = false,
		INP_Default = 0.0,
		ICD_Width = 1,
		BTNCS_Execute = [[
------------------------------------------------------------------------
-- Open a webpage window up using your default web browser
platform = (FuPLATFORM_WINDOWS and 'Windows') or (FuPLATFORM_MAC and 'Mac') or (FuPLATFORM_LINUX and 'Linux')

function OpenURL(siteName, path)
	if platform == "Windows" then
		-- Running on Windows
		command = 'explorer "' .. path .. '"'
	elseif platform == 'Mac' then
		-- Running on Mac
		command = 'open "' .. path .. '" &'
	 elseif platform == "Linux" then
		-- Running on Linux
		command = 'xdg-open "' .. path .. '" &'
	else
		print('[Error] There is an invalid Fusion platform detected')
		return
	end
	os.execute(command)
	-- print('[Launch Command] ', command)
	print('[Opening URL] [' .. siteName .. '] ' .. path)
end

OpenURL('Innobrite Altus Denoiser CLI Website', 'https://www.innobright.com/about-altus/')
]],
			IC_Visible = true,
			ICS_ControlPage = 'Help',
		})
	
	-- Output
	OutImage = self:AddOutput("Output", "Output", {
		LINKID_DataType = "Image",
		LINK_Main = 1,
	})
	
end

function NotifyChanged(inp, param, time)
end

function Process(req)
	local verbose = InVerbose:GetValue(req)
	
	-- B0 Image input connections
	local imgB0RGB = InImageB0RGB:GetValue(req)
	local imgB0WorldPositions = InImageB0WorldPositions:GetValue(req)
	local imgB0WorldNormals = InImageB0WorldNormals:GetValue(req)
	local imgB0MatteShadow = InImageB0MatteShadow:GetValue(req)
	local imgB0DiffuseFilter = InImageB0DiffuseFilter:GetValue(req)
	local imgB0Reflection = InImageB0Reflection:GetValue(req)
	
	-- B1 Image input connections
	local imgB1RGB = InImageB1RGB:GetValue(req)
	local imgB1WorldPositions = InImageB1WorldPositions:GetValue(req)
	local imgB1WorldNormals = InImageB1WorldNormals:GetValue(req)
	local imgB1MatteShadow = InImageB1MatteShadow:GetValue(req)
	local imgB1DiffuseFilter = InImageB1DiffuseFilter:GetValue(req)
	local imgB1Reflection = InImageB1Reflection:GetValue(req)
	
	-- Fuse GUI controls
	local buffer = AltusBuffer:GetValue(req).Value
	local channels = AltusChannels:GetValue(req).Value
	local quality = AltusQuality:GetValue(req).Value
	local render = AltusRenderFrame:GetValue(req).Value
	local firefly = AltusFirefly:GetValue(req).Value
	local kc1 = AltusKC1:GetValue(req).Value
	local kc2 = AltusKC2:GetValue(req).Value
	-- local kc3 = AltusKC3:GetValue(req).Value
	local kc4 = AltusKC4:GetValue(req).Value
	local kf = AltusKF:GetValue(req).Value
	local radius = AltusRadius:GetValue(req).Value
	
	-- B0 Image pointer
	local resultB0RGB = Image({IMG_Like = imgB0RGB, IMG_NoData = req:IsPreCalc()})
	local resultB0WorldPositions = Image({IMG_Like = imgB0WorldPositions, IMG_NoData = req:IsPreCalc()})
	local resultB0WorldNormals = Image({IMG_Like = imgB0WorldNormals, IMG_NoData = req:IsPreCalc()})
	local resultB0MatteShadow = Image({IMG_Like = imgB0MatteShadow, IMG_NoData = req:IsPreCalc()})
	local resultB0DiffuseFilter = Image({IMG_Like = imgB0DiffuseFilter, IMG_NoData = req:IsPreCalc()})
	local resultB0Reflection = Image({IMG_Like = imgB0Reflection, IMG_NoData = req:IsPreCalc()})

	-- B1 Image pointer
	local resultB1RGB = Image({IMG_Like = imgB1RGB, IMG_NoData = req:IsPreCalc()})
	local resultB1WorldPositions = Image({IMG_Like = imgB1WorldPositions, IMG_NoData = req:IsPreCalc()})
	local resultB1WorldNormals = Image({IMG_Like = imgB1WorldNormals, IMG_NoData = req:IsPreCalc()})
	local resultB1MatteShadow = Image({IMG_Like = imgB1MatteShadow, IMG_NoData = req:IsPreCalc()})
	local resultB1DiffuseFilter = Image({IMG_Like = imgB1DiffuseFilter, IMG_NoData = req:IsPreCalc()})
	local resultB1Reflection = Image({IMG_Like = imgB1Reflection, IMG_NoData = req:IsPreCalc()})
	
	-- Handle the cropped image inputs
	imgB0RGB:Crop(resultB0RGB, { })
	imgB0WorldPositions:Crop(resultB0WorldPositions, { })
	imgB0WorldNormals:Crop(resultB0WorldNormals, { })
	imgB0MatteShadow:Crop(resultB0MatteShadow, { })
	imgB0DiffuseFilter:Crop(resultB0DiffuseFilter, { })
	imgB0Reflection:Crop(resultB0Reflection, { })
	
	-- Handle the cropped image inputs
	imgB1RGB:Crop(resultB1RGB, { })
	imgB1WorldPositions:Crop(resultB1WorldPositions, { })
	imgB1WorldNormals:Crop(resultB1WorldNormals, { })
	imgB1MatteShadow:Crop(resultB1MatteShadow, { })
	imgB1DiffuseFilter:Crop(resultB1DiffuseFilter, { })
	imgB1Reflection:Crop(resultB1Reflection, { })
	
	-- Altus Metadata
	local altus = {}
	altus.kc_1 = kc1
	altus.kc_2 = kc2
	--altus.kc_3 = kc3
	altus.kc_4 = kc4
	altus.kf = kf
	altus.radius = radius
	
	if firefly == 1 then
		altus.firefly = 1
	else
		altus.firefly = 0
	end
	
	if quality == 0 then
		altus.quality = "preview"
	else
		altus.quality = "production"
	end
	
	-- Render this frame in Altus
	altus.render = render
	
	-- B0 Extract the Filename metadata tags from the other image inputs
	altus.B0Filename = resultB0RGB.Metadata.Filename or ''
	-- B1 Extract the Filename metadata tags from the other image inputs
	altus.B1Filename = resultB1RGB.Metadata.Filename or ''
	
	local resultOutput = nil
	if buffer == 0 then
		-- Buffer 0 Output
		if channels == 0 then
			-- RGB
			resultOutput = resultB0RGB
		elseif channels == 1 then
			-- World Positions
			resultOutput = resultB0WorldPositions
		elseif channels == 2 then
			-- World Normals
			resultOutput = resultB0WorldNormals
		elseif channels == 3 then
			-- Matte Shadow
			resultOutput = resultB0MatteShadow
		elseif channels == 4 then
			-- Diffuse Filter
			resultOutput = resultB0DiffuseFilter
		elseif channels == 5 then
			-- Reflection
			resultOutput = resultB0Reflection
		else
			-- RGB Fallback
			resultOutput = resultB0RGB
		end
	else
		-- Buffer 1 Output
		if channels == 0 then
			-- RGB
			resultOutput = resultB1RGB
		elseif channels == 1 then
			-- World Positions
			resultOutput = resultB1WorldPositions
		elseif channels == 2 then
			-- World Normals
			resultOutput = resultB1WorldNormals
		elseif channels == 3 then
			-- Matte Shadow
			resultOutput = resultB1MatteShadow
		elseif channels == 4 then
			-- Diffuse Filter
			resultOutput = resultB1DiffuseFilter
		elseif channels == 5 then
			-- Reflection
			resultOutput = resultB1Reflection
		else
			-- RGB Fallback
			resultOutput = resultB1RGB
		end
	end
	
	-- Push the revised metadata back into the original result table
	local metadataOutput = resultOutput.Metadata or {}
	metadataOutput.Altus = altus
	resultOutput.Metadata = metadataOutput
	
	-- Verbose print the metadata to the Console view
	if verbose == 1 or verbose == true then
		-- The Metdata Lua Table output
		print('[Metadata]')
		dump(resultOutput.Metadata)
	end
	
	-- Render this frame in Altus
	if render == 1 then
		RenderFrame(altus.B0Filename, altus.B1Filename, kc1, kc2, kc4, kf, radius, firefly, quality)
	end
	
	-- Update the final metadata on the B0 RGB image output
	OutImage:Set(req, resultOutput)
end


------------------------------------------------------------------------------
-- ParseFilename() from bmd.scriptlib
--
-- this is a great function for ripping a filepath into little bits
-- returns a table with the following
--
-- FullPath : The raw, original path sent to the function
-- Path : The path, without filename
-- FullName : The name of the clip w\ extension
-- Name : The name without extension
-- CleanName: The name of the clip, without extension or sequence
-- SNum : The original sequence string, or "" if no sequence
-- Number : The sequence as a numeric value, or nil if no sequence
-- Extension: The raw extension of the clip
-- Padding : Amount of padding in the sequence, or nil if no sequence
-- UNC : A true or false value indicating whether the path is a UNC path or not
------------------------------------------------------------------------------
function ParseFilename(filename)
	local seq = {}
	seq.FullPath = filename
	string.gsub(seq.FullPath, "^(.+[/\\])(.+)", function(path, name) seq.Path = path seq.FullName = name end)
	string.gsub(seq.FullName, "^(.+)(%..+)$", function(name, ext) seq.Name = name seq.Extension = ext end)

	if not seq.Name then -- no extension?
		seq.Name = seq.FullName
	end

	string.gsub(seq.Name, "^(.-)(%d+)$", function(name, SNum) seq.CleanName = name seq.SNum = SNum end)

	if seq.SNum then
		seq.Number = tonumber( seq.SNum )
		seq.Padding = string.len( seq.SNum )
	else
		seq.SNum = ""
		seq.CleanName = seq.Name
	end

	if seq.Extension == nil then seq.Extension = "" end
	seq.UNC = ( string.sub(seq.Path, 1, 2) == [[\\]] )

	return seq
end

-- Find out the current directory from a file path
-- Example: print(Dirname('/Users/Shared/file.txt'))
function Dirname(mediaDirName)
	if mediaDirName then
		return mediaDirName:match('(.*' .. osSeparator .. ')')
	else
		return nil
	end
end

-- Split apart a filepath and get the parent dir, the current dir, the filename, filename without the extension, and the file extension.
-- Example: parentDirectory, currentDirectory, currentFile, currentFileNoExt, currentExtension = splitFilepath('/Volumes/Media/Bridge/Under the Bridge.0000.tif')
function splitFilepath(dirpath)
	-- Break the elements apart using the matching pattern '(.*/)(.*/)')
	local parentDir, currentDir = string.match(dirpath, '(.*' .. osSeparator ..')(.*' .. osSeparator ..')')
	
	local filename = eyeon.getfilename(dirpath)
	local filenameNoExt = eyeon.trimExtension(filename)
	local ext = eyeon.getextension(filename)
	
	return parentDir, currentDir, filename, filenameNoExt, ext
end


function RenderFrame(B0Filename, B1Filename, kc1, kc2, kc4, kf, radius, firefly, quality)
	-- Add the platform specific folder slash character
	osSeparator = package.config:sub(1,1)
	
	-- Find out the current Fusion host platform (Windows/Mac/Linux)
	if string.find(self.Comp:MapPath('Fusion:/'), 'Program Files', 1) then
		platform = 'Windows'
	elseif string.find(self.Comp:MapPath('Fusion:/'), 'PROGRA~1', 1) then
		platform = 'Windows'
	elseif string.find(self.Comp:MapPath('Fusion:/'), 'Applications', 1) then
		platform = 'Mac'
	else
		platform = 'Linux'
	end
	

	-- Parse the B0 filename 
	b0FilenameTable = ParseFilename(B0Filename or '')
	--	==ParseFilename('/Volumes/Altus/Medias/satellite_lighting_b0.0001.exr')
	--	table: 0x5ce69fb8
	--		Path = /Volumes/Altus/Medias/
	--		Name = satellite_lighting_b0.0124
	--		CleanName = satellite_lighting_b0.
	--		Number = 124
	--		FullName = satellite_lighting_b0.0124.exr
	--		UNC = false
	--		Padding = 4
	--		Extension = .exr
	--		FullPath = /Volumes/Altus/Medias/satellite_lighting_b0.0001.exr
	--		SNum = 0124
		
	print('\n[Altus Frame] ' .. tostring(b0FilenameTable.Number))
	
	-- platform = (FuPLATFORM_WINDOWS and 'Windows') or (FuPLATFORM_MAC and 'Mac') or (FuPLATFORM_LINUX and 'Linux')
	print('\t[Host OS] ' .. tostring(platform))
		
	if B0Filename and b0FilenameTable.Path then
		print('\t[Filename] ' .. B0Filename)
		
		-- Check if the output folder exists
		if not bmd.fileexists(b0FilenameTable.Path) then
			print('\t[Create Directory] ', b0FilenameTable.Path)
			bmd.createdir(b0FilenameTable.Path)
		end
		
		if platform == 'Mac' then
			-- Altus program on macOS
			altusExecutable = '/Applications/altus/altus-cli'
		elseif platform == 'Linux' then
			-- Altus program on Linux
			altusExecutable = '/opt/altus/altus-cli'
		else
			-- Altus program on Windows
			altusExecutable = 'C:\\Program Files\\altus\\altus-cli'
		end
		
		inputDir = tostring(b0FilenameTable.Path) .. 'altus_input' .. osSeparator
		if not bmd.fileexists(inputDir) then
			print('\t[Create Input Directory] ', inputDir)
			bmd.createdir(inputDir)
		end
		
		outputDir = tostring(b0FilenameTable.Path) .. 'altus_output' .. osSeparator
		if not bmd.fileexists(outputDir) then
			print('\t[Create Output Directory] ', outputDir)
			bmd.createdir(outputDir)
		end
		
		-- Buffer 0
		local B0RGBSaver = inputDir .. 'rgb_b0.' .. tostring(b0FilenameTable.SNum) .. '.exr'
		local B0WorldPositionsSaver = inputDir .. 'WorldPositions_b0.' .. tostring(b0FilenameTable.SNum) .. '.exr'
		local B0WorldNormalsSaver = inputDir .. 'WorldNormals_b0.' .. tostring(b0FilenameTable.SNum) .. '.exr'
		local B0DiffuseFilterSaver = inputDir .. 'MatteShadow_b0.' .. tostring(b0FilenameTable.SNum) .. '.exr'
		local B0MatteShadowSaver = inputDir .. 'DiffuseFilter_b0.' .. tostring(b0FilenameTable.SNum) .. '.exr'
		local B0ReflectionSaver = inputDir .. 'Reflection_b0.' .. tostring(b0FilenameTable.SNum) .. '.exr'
		
		-- Buffer 1
		local B1RGBSaver = inputDir .. 'rgb_b1.' .. tostring(b0FilenameTable.SNum) .. '.exr'
		local B1WorldPositionsSaver = inputDir .. 'WorldPositions_b1.' .. tostring(b0FilenameTable.SNum) .. '.exr'
		local B1WorldNormalsSaver = inputDir .. 'WorldNormals_b1.' .. tostring(b0FilenameTable.SNum) .. '.exr'
		local B1DiffuseFilterSaver = inputDir .. 'MatteShadow_b1.' .. tostring(b0FilenameTable.SNum) .. '.exr'
		local B1MatteShadowSaver = inputDir .. 'DiffuseFilter_b1.' .. tostring(b0FilenameTable.SNum) .. '.exr'
		-- local B1ReflectionSaver = inputDir .. 'Reflection_b1.' .. tostring(b0FilenameTable.SNum) .. '.exr'
		
		-- Generate the Altus Config file
		imageFlags = '--out-dir="' .. outputDir .. '" '
		
		imageFlags = imageFlags .. '--rgb-0="' .. B0RGBSaver .. '" '
		imageFlags = imageFlags .. '--rgb-1="' .. B1RGBSaver .. '" '
		
		imageFlags = imageFlags .. '--pos-0="' .. B0WorldPositionsSaver .. '" '
		imageFlags = imageFlags .. '--pos-1="' .. B1WorldPositionsSaver .. '" '
		
		imageFlags = imageFlags .. '--nrm-0="' .. B0WorldNormalsSaver .. '" '
		imageFlags = imageFlags .. '--nrm-1="' .. B1WorldNormalsSaver .. '" '
		
		imageFlags = imageFlags .. '--alb-0="' .. B0DiffuseFilterSaver .. '" '
		imageFlags = imageFlags .. '--alb-1="' .. B1DiffuseFilterSaver .. '" '
		
		imageFlags = imageFlags .. '--vis-0="' .. B1MatteShadowSaver .. '" '
		imageFlags = imageFlags .. '--vis-1="' .. B1MatteShadowSaver .. '" '
		
		-- Filter controls
		imageFlags = imageFlags .. '--kc_1=' .. tostring(kc1) .. ' '
		imageFlags = imageFlags .. '--kc_2=' .. tostring(kc2) .. ' '
		imageFlags = imageFlags .. '--kc_4=' .. tostring(kc4) .. ' '
		imageFlags = imageFlags .. '--kf=' .. tostring(kf) .. ' '
		imageFlags = imageFlags .. '--radius=' .. tostring(radius) .. ' '
		
		if quality == 0 then
			imageFlags = imageFlags .. '--quality=preview' .. ' '
		else
			imageFlags = imageFlags .. '--quality=production' .. ' '
		end
	
		if firefly == 1 then
			imageFlags = imageFlags .. '--firefly' .. ' '
		end
		
		if platform == 'Mac' then
			-- MacOS GPU selector
			imageFlags = imageFlags .. '--device-id=2' .. ' '
			imageFlags = imageFlags .. '--platform-id=1' .. ' '
		elseif platform == 'Linux' then
			-- Linux CPU selector
			imageFlags = imageFlags .. '--device-id=0' .. ' '
			imageFlags = imageFlags .. '--platform-id=0' .. ' '
		else
			-- Altus program on Windows - @Todo Verify platform-id
			imageFlags = imageFlags .. '--device-id=2' .. ' '
			imageFlags = imageFlags .. '--platform-id=2' .. ' '
		end
		
		-- Generate the Altus launching string
		local LaunchCommand = altusExecutable .. ' ' .. imageFlags .. ' > "' .. outputDir .. 'altus.' .. tostring(b0FilenameTable.SNum) .. '.log"'
		
		-- Verbose print the os.execute() launch command to the Console view
		if verbose == 1 or verbose == true then
			print('\t[Launch Command] ' .. LaunchCommand)
		end
		
		-- Run Altus
		os.execute(LaunchCommand)
		
		-- Generate the Altus "rgb_flt.0000.exr" filename
		local oldImage = outputDir .. 'rgb_b0.' .. tostring(b0FilenameTable.SNum) .. '_flt.exr'
		
		-- Generate a clean "rgb_nr.0000.exr" filename
		local newImage = outputDir .. 'rgb_nr.' .. tostring(b0FilenameTable.SNum) .. '.exr'
		
		if not bmd.fileexists(oldImage) then
			print('\t[Altus Frame Not Found] ' .. oldImage)
		else
			renameResult = os.rename(oldImage, newImage)
			if renameResult ~= nil then
				print('\t[Rename Image]')
				print('\t\t[From Filename] ' .. oldImage)
				print('\t\t[To Filename] ' .. newImage)
			else
				print('\t[Rename Image failed - Running this script a 2nd time will fix the issue]')
				print('\t\t[From Filename] ' .. oldImage)
				print('\t\t[To Filename] ' .. newImage)
			end
		end
		
		-- The Altus task done
		print('\t[Altus Done]')
	else
		print('\t[Altus Render] Empty Filename. Please type in a filename and then click the "Process Animation" button again.')
	end
end
