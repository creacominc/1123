--[[--
KartaVR Comp DragDrop.fu - v4.2 2019-11-04
By Andrew Hazelden <andrew@andrewhazelden.com>

Overview
The "KartaVR Comp DragDrop.fu" file allows you to import a Fusion .comp file by dragging it into the Nodes view from a desktop Explorer/Finder/Nautilus folder browsing window. This is a quick way to merge in external Fusion .comp documents into an existing open foreground composite and is very handy for Resolve users who work with Media Pool based Fusion comps, or Timeline based Fusion comps.

If you are starting to learn how KartaVR for Resolve works, and want to quickly access an example .comp file in Resolve, this DragDrop file has your back! :)

Usage
1. After you install the "KartaVR Comp DragDrop.fu" file you will need to restart the Fusion program once.

2. Select a .comp file in an Explorer (Win), Finder (macOS), Nautilus (Linux) desktop folder browsing window.

3. Drag the .comp file to the Fusion/Resolve Nodes view. The document will be automatically imported into your foreground composite.


Installation
Install the "KartaVR DragDrop" atom package via the Reactor package manager.


Todo
- Rewrite all of the imported Loader/Saver/FBXMesh3D/ABCMesh3D node files paths that have a relative "Comp:/" PathMap URL over to an absolute filepath based upon the base directory of the drag_drop'ed .comp file.
- Edit MediaIn nodes in the imported comp so the "selectedNode:GetData('MediaProps.MEDIA_PATH')" value is used to regenerate the required UUID values in the Media Pool via the Resolve API. This would allow MP4/MOV/MXF movie files footage to be found and used correctly in the Resolve Fusion page.
- Figure out the "args.ShiftModifier" equivalent variable name for detecting hotkeys from .fu events.

Note
It is currently possible to drag a .comp file from your Desktop into a stock copy of Fusion Standalone by targeting that thin area at top of the main Fusion window's Composite "tab" bar zone, and then that comp file will be opened. But this approach doesn't work in Resolve, and you can't drag and drop a .comp file anywhere else in the Fusion Standalone GUI and have the comp file open.

--]]--

{
	Event{
		Action = 'Drag_Drop',
		Targets = {
			FuView = {
				Execute = _Lua [=[
-- Check if the file extension matches
-- Example: isComp = MatchExt('/Example.comp', '.comp')
function MatchExt(file, fileType)
	-- Get the file extension
	local ext = string.match(tostring(file), '^.+(%..+)$')

	-- Compare the results
	if ext == tostring(fileType) then
		return true
	else
		return false
	end
end


-- Get the current comp object
-- Example: comp = GetCompObject()
function GetCompObject()
	local cmp = app:GetAttrs().FUSIONH_CurrentComp
	return cmp
end


-- Import the comp file into the current foreground composite
function ImportComp(compFilename)
	print('[Comp Import] ' .. tostring(compFilename))

	-- Read the comp file into a text string
	local compString = assert(io.open(tostring(compFilename), 'r'):read('*all'))
	-- dump(compString)

	-- The system temporary directory path (Example: $TEMP/KartaVR/)
	local outputDirectory = comp:MapPath('Temp:\\KartaVR\\')
	os.execute('mkdir "' .. outputDirectory ..'"')

	-- Save a .setting file in the "$TEMP/KartaVR/" folder
	local settingFile = outputDirectory .. 'CompImport.setting'
	-- print('[Settings File] ' .. settingFile)

	-- Open up a file pointer for saving a settings textfile
	local outFile, err = io.open(settingFile, 'w')
	if err then
		print("[Error] Unable to open settings file for writing.")
		return
	end

	-- Check the file pointer is valid
	if outFile then
		-- Write out the .settings file
		outFile:write(compString)
		outFile:write('\n')

		-- Close the file pointer
		outFile:close()

		-- Lock the comp to suppress any file dialogs opening if there are any Loader/Saver/FBXmesh3D/ABCmesh3D nodes present that have empty filename fields.
		-- print('[Locking Comp]')
		comp:Lock()

		-- Add the macro .setting file to the foreground comp
		comp:QueueAction('AddSetting', {filename = settingFile})

		-- Unlock the comp to restore "normal" file dialog opening operations
		-- print('[Unlock Comp]')
		comp:Unlock()
	else
		print("[Error] Unable to create settings file.")
	end
end


-- Open the composition file into a new Fusion tab
-- Example: comp = OpenComp(compFilename)
function OpenComp(compFilename)
	print('[Comp Open] ' .. tostring(compFilename))
	local cmp = fusion:LoadComp(tostring(compFilename), true, false, false)

	return cmp
end


-- Process a .comp file dropped into Fusion
-- Example: ProcessFile('/Example.com', 1)
function ProcessFile(file, fileNum)
	-- comp:Print('['.. fileNum .. '][File Drop] ', file, '\n'

	-- Check if the file extension matches
	if MatchExt(file, '.comp') then
		-- Accept the Drag and Drop event
		rets.handled = true

		-- Get the current comp object
		comp = GetCompObject()
		if not comp then
			-- The comp pointer is undefined
			print('[Comp Import] Please open a Fusion composite before dragging in a .comp file again.')
			return
		end

		---- Todo: Get the shift hotkey modifer working
		--if args.shiftModifier then
		--	-- Check for a shift key press to enable the comp open option
		--	importComp = false
		--end

		-- Should the comp be imported or opened?
		importComp = true
		-- importComp = false
		if importComp then
			-- Import the comp file into the current foreground composite
			ImportComp(file)
		else
			-- Open the composition file into a new Fusion tab
			OpenComp(file)
		end

		print('\n')
	end
end


-- Where the magic begins
function Main()
	-- Call other chained events and default action
	rets = self:Default(ctx, args)

	-- Debug print the args
	-- dump(args)

	-- Drop zone screen coordinates
	mousex = args._sxpos
	mousey = args._sypos

	-- No one else handled this?
	if not rets.handled then
		-- Get the list of files dropped onto Fusion
		files = args.urilist

		-- Scan through each of the files
		for i, file in ipairs(files) do
			-- Process a .comp file dropped into Fusion
			ProcessFile(file, num)
		end
	end

	-- Debug print where the file was dropped onscreen in the window (using screen coordinates)
	-- print('[Drop Zone Coords] [X] ' .. tostring(mousex) .. ' [Y] ' .. tostring(mousey) .. 'px')
	-- print('\n')
end

-- Run the main function
Main()
]=],
			},
		},
	},
}
