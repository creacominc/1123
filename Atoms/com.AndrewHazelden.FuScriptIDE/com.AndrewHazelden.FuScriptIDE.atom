Atom {
	Name = "FuScript IDE forÂ BBEdit",
	Category = "Bin",
	Author = "Andrew Hazelden",
	Version = 2,
	Date = {2018, 9, 14},
	Description = [[<p>This project has three AppleScripts that connect BBEdit on MacOS to the Fusion Studio and Resolve Studio via the FuScript command line process. This will free you from the constraints of testing code chunks via the single line entry text field in the Fusion Console tab.</p>

<p>Using this toolset you can now use BBEdit to quickly edit Fusion .lua and .py scripts and run them instantly through the context of the current Fusion composite. If you select a Fusion .comp file it will be opened in a new tab in Fusion. If you select a Fusion macro .setting file it will be added to your current composite.</p>

<p>Fusion Studio or Resolve Studio needs to be running for the FuScript tool to function correctly. The fusion:, fu:, app:, and comp: pointers are configured and the active Fusion comp is linked to automatically. This means you are instantly capable of connecting to the foreground Fusion composite or able to create a Fusion UI Manger based script GUI.</p>

<h2>FuScript IDE GitHub Page</h2>

<p>https://github.com/AndrewHazelden/Fusion-Studio-FuScript-IDE-Tools-and-Pipeline-Scripts</p>
]],
	Deploy = {
		
		Mac = {
			"Bin/FuScriptIDE/Color Schemes/Charcoal.bbColorScheme",
			"Bin/FuScriptIDE/Color Schemes/Midnight Blue.bbColorScheme",
			"Bin/FuScriptIDE/Scripts/Fusion/Fusion Script Terminal From BBEdit.scpt",
			"Bin/FuScriptIDE/Scripts/Fusion/Fusion Script Terminal Interactive Shell.scpt",
			"Bin/FuScriptIDE/Scripts/Fusion/Fusion Script Terminal With File Dialog.scpt",
			"Bin/FuScriptIDE/Scripts/Resolve/Resolve Script Terminal From BBEdit.scpt",
			"Bin/FuScriptIDE/Scripts/Resolve/Resolve Script Terminal Interactive Shell.scpt",
			"Bin/FuScriptIDE/Scripts/Resolve/Resolve Script Terminal With File Dialog.scpt",
			"Docs/FuScriptIDE/Images/apple-script-editor-fuscript-hostname.png",
			"Docs/FuScriptIDE/Images/bbedit-fuscript-terminal-from-bbedit-hotkey-command-r.png",
			"Docs/FuScriptIDE/Images/bbedit-languages.png",
			"Docs/FuScriptIDE/Images/bbedit-open-scripts-folder.png",
			"Docs/FuScriptIDE/Images/bbedit-run-hotkey-shift-command-r.png",
			"Docs/FuScriptIDE/Images/bbedit-scripts-menu-items.png",
			"Docs/FuScriptIDE/Images/choose-language-for-interactive-shell.png",
			"Docs/FuScriptIDE/Images/copy-fusion-folder.png",
			"Docs/FuScriptIDE/Images/fuscript-bbedit-python-document.png",
			"Docs/FuScriptIDE/Images/fuscript-from-bbedit.png",
			"Docs/FuScriptIDE/Images/fuscript-interactive-shell.png",
			"Docs/FuScriptIDE/Images/fuscript-with-filedialog.png",
			"Docs/FuScriptIDE/Script Examples/Fusion Composite Viewer.lua",
			"Docs/FuScriptIDE/Script Examples/getattrs.lua",
			"Docs/FuScriptIDE/Script Examples/getattrs.py",
			"Docs/FuScriptIDE/README.html",
			"Docs/FuScriptIDE/README.md",
		},
	},
	InstallScript = {
		Mac = {
			[[-- Copy the BBEdit FuScript IDE AppleScript and Color Scheme files

-- CopyFile comes from bmd.scriptlib
function CopyFile(src_path, dest_path)
	local read_size = 65536

	src, errMsg = io.open(src_path, "rb")
	if src == nil then
		return 0, "SOURCE : " .. errMsg
	end

	local size = src:seek("end")
	src:seek("set")

	dest, errMsg = io.open(dest_path, "wb")
	if dest == nil then
		return 0, "DEST : " .. errMsg
	end

	src_data = src:read(read_size)
	repeat
		dest:write(src_data)
		src_data = src:read(read_size)
	until src_data == nil

	src:close()
	dest:close()
	return size
end

-- Only run this script on a macOS system
if platform == "Mac" then
	-- Home folder ($HOME) /users/<user account>
	homePath = os.getenv("HOME")
	
	-- Verify the $HOME environment variable exists
	if homePath then
		dprintf("[FuScript IDE] Installing the BBEdit FuScript IDE Files.\n")
		
		-- Convert the BBEdit Application Support folder to an absolute file path
		bbeditScriptsPath = homePath .. "/Library/Application Support/BBEdit/Scripts/"
		dprintf("[BBedit Scripts Folder] " .. tostring(bbeditScriptsPath) .. "\n")
		
		-- Create the BBEdit Scripts folder if it doesn't exist
		bmd.createdir(bbeditScriptsPath)
		bmd.createdir(bbeditScriptsPath .. "Fusion")
		bmd.createdir(bbeditScriptsPath .. "Resolve")
		
		-- FuScriptIDE Scripts folder"
		docsScriptsPath = app:MapPath("Reactor:/Deploy/Bin/FuScriptIDE/Scripts/")
		
		-- Applescript files to copy
		fileList = {
			"Fusion/Fusion Script Terminal From BBEdit.scpt",
			"Fusion/Fusion Script Terminal Interactive Shell.scpt",
			"Fusion/Fusion Script Terminal With File Dialog.scpt",
			"Resolve/Resolve Script Terminal From BBEdit.scpt",
			"Resolve/Resolve Script Terminal Interactive Shell.scpt",
			"Resolve/Resolve Script Terminal With File Dialog.scpt",
		}
		
		-- Copy each of the Applescript files
		dprintf("\n[BBedit Scripts File List]\n")
		for k, v in pairs(fileList) do
			dprintf("[" .. k .. "]\n")
			dprintf("\t[Copy] " .. docsScriptsPath .. v .. "\n")
			dprintf("\t[To] " .. bbeditScriptsPath .. v .. "\n")
			result = CopyFile(docsScriptsPath .. v, bbeditScriptsPath .. v)
			dprintf("\t[File Size] " .. tostring(result) .. " bytes\n")
		end
		
		-- Turn on executable permissions for the MacOS Applescripts so they can be run from the command line
		command = "chmod -R 755 \"" .. bbeditScriptsPath .. "\""
		dprintf("[Permissions Update] " .. command .. "\n")
		os.execute(command)
		
		-- FuScriptIDE ColorSchemes folder"
		docsColorSchemesPath = app:MapPath("Reactor:/Deploy/Bin/FuScriptIDE/Color Schemes/")
		
		-- Convert the BBEdit Application Support folder to an absolute file path
		bbeditColorSchemesPath = homePath .. "/Library/Application Support/BBEdit/Color Schemes/"
		dprintf("\n[BBedit Color Schemes Folder] " .. tostring(bbeditColorSchemesPath) .. "\n")
		
		-- Create the BBEdit Color Schemes folder if it doesn't exist
		bmd.createdir(bbeditColorSchemesPath)
		
		-- Color Scheme files to copy
		fileList = {
			"Charcoal.bbColorScheme",
			"Midnight Blue.bbColorScheme",
		}
		
		-- Copy each of the Color Schemes files
		dprintf("\n[BBedit Color Schemes File List]\n")
		for k, v in pairs(fileList) do
			dprintf("[" .. k .. "]\n")
			dprintf("\t[Copy] " .. docsColorSchemesPath .. v .. "\n")
			dprintf("\t[To] " .. bbeditColorSchemesPath .. v .. "\n")
			result = CopyFile(docsColorSchemesPath .. v, bbeditColorSchemesPath .. v)
			dprintf("\t[File Size] " .. tostring(result) .. " bytes\n")
		end
		
		dprintf("\n[FuScript IDE] Done\n")
	else
		dprintf("[FuScript IDE] There was no $HOME environment variable.\n")
	end
else
	dprintf("[FuScript IDE] BBEdit scripts are only available for macOS users.\n")
end
]],
		},
	},
	UninstallScript = {
		Mac = {
			[[-- Remove the BBEdit FuScript IDE AppleScript and Color Scheme files

-- Only run this script on a macOS system
if platform == "Mac" then
	-- Home folder ($HOME) /users/<user account>
	homePath = os.getenv("HOME")
	
	-- Verify the $HOME environment variable exists
	if homePath then
		dprintf("[FuScript IDE] Uninstalling the BBEdit FuScript IDE Files.\n")
		
		-- Convert the BBEdit Application Support folder to an absolute file path
		bbeditScriptsPath = homePath .. "/Library/Application Support/BBEdit/Scripts/"
		dprintf("[BBedit Scripts Folder] " .. tostring(bbeditScriptsPath) .. "\n")
		
		-- FuScriptIDE Scripts folder"
		docsScriptsPath = app:MapPath("Reactor:/Deploy/Bin/FuScriptIDE/Scripts/")
		
		-- Applescript files
		fileList = {
			"Fusion/Fusion Script Terminal From BBEdit.scpt",
			"Fusion/Fusion Script Terminal Interactive Shell.scpt",
			"Fusion/Fusion Script Terminal With File Dialog.scpt",
			"Resolve/Resolve Script Terminal From BBEdit.scpt",
			"Resolve/Resolve Script Terminal Interactive Shell.scpt",
			"Resolve/Resolve Script Terminal With File Dialog.scpt",
		}
		
		-- Remove each of the Applescript files
		dprintf("\n[BBEdit Scripts File List]\n")
		for k, v in pairs(fileList) do
			dprintf("[" .. k .. "]\n")
			
			-- Remove the file using the shell "rm" command
			command = "rm \"" .. bbeditScriptsPath .. v .. "\""
			dprintf("\t[Removing File] " .. command .. "\n")
			os.execute(command)
		end
		
		-- Remove the BBEdit Scripts based "Fusion" and "Resolve" folders if they are empty
		bmd.removedir(bbeditScriptsPath .. "Fusion")
		bmd.removedir(bbeditScriptsPath .. "Resolve")
		
		-- FuScriptIDE ColorSchemes folder"
		docsColorSchemesPath = app:MapPath("Reactor:/Deploy/Bin/FuScriptIDE/Color Schemes/")
		
		-- Convert the BBEdit Application Support folder to an absolute file path
		bbeditColorSchemesPath = homePath .. "/Library/Application Support/BBEdit/Color Schemes/"
		dprintf("\n[BBedit Color Schemes Folder] " .. tostring(bbeditColorSchemesPath) .. "\n")
		
		-- Color Scheme files
		fileList = {
			"Charcoal.bbColorScheme",
			"Midnight Blue.bbColorScheme",
		}
		
		-- Remove each of the Color Schemes files
		dprintf("\n[BBEdit Color Schemes File List]\n")
		for k, v in pairs(fileList) do
			dprintf("[" .. k .. "]\n")
			
			-- Remove the file using the shell "rm" command
			command = "rm \"" .. bbeditColorSchemesPath .. v .. "\""
			dprintf("\t[Removing File] " .. command .. "\n")
			os.execute(command)
		end
		
		dprintf("\n[FuScript IDE] Done\n")
	else
		dprintf("[FuScript IDE] There was no $HOME environment variable.\n")
	end
else
	dprintf("[FuScript IDE] BBEdit scripts are only available for macOS users.\n")
end
]],
		},
	},
}
