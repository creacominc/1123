--[[	Out-of-range Zebra-pattern ViewShader fuse		]]--

-- Here's the Cg shader itself:
shader = 
[[
struct ZebraVSFuse : ViewShader
{
	ViewShader source;									// need this line
	float black, white;									// enable switches (0 or 1)

	void ShadePixel(inout FuPixel f)
	{
		source.ShadePixel(f);							// get source pixel
		
		float4 clampb = max(f.Color, 0.0);				// clamp black
		float4 diffb  = ceil(abs(f.Color - clampb));	// unclamped = 0, clamped = 1
		float4 clampw = min(f.Color, 1.0);				// clamp white
		float4 diffw  = ceil(abs(f.Color - clampw));	// unclamped = 0, clamped = 1

		diffb = saturate(diffb) * black;				// limit to 0..1 and apply switch
		diffw = saturate(diffw) * white;
		float4 diff = diffb + diffw;					// combine channel differences

		diff *= step(fmod(f.TexCoord2.x + f.TexCoord2.y + 0.1f, 8), 4);	// zebra pattern
//		float2 coord = sign(frac(f.TexCoord2 / 60.0f) - 0.5f);
//		diff *= abs(coord.x + coord.y) * 0.5f;							// alternative: checker pattern

		f.Color = lerp(f.Color, diffb, diff);			// switch between orig & black/white
	}
};
]]

-- regnode
FuRegisterClass("ZebraVSFuse", CT_ViewLUTPlugin, {		-- ID must be unique
	REGS_Name = "Zebra ViewShader",
	})
	
-- Called on creation. Add any controls here.
function Create()
	InBlack = self:AddInput("Black", "Black", {
		LINKID_DataType = "Number",
		INPID_InputControl = "CheckboxControl",
		INP_Default = 1.0,
		ICD_Width = 0.5,
		})
	InWhite = self:AddInput("White", "White", {
		LINKID_DataType = "Number",
		INPID_InputControl = "CheckboxControl",
		INP_Default = 1.0,
		ICD_Width = 0.5,
		})
end

-- This is called when the shader is created
-- img may be nil
function SetupShader(req, img)
	local vs = ViewShader("ZebraVSFuse", shader);	-- pass struct name and shader string
	vs:AddParam("black");							-- add any external parameters 
	vs:AddParam("white");
	return vs;
end

-- This is called every display refresh
-- img may be nil
function SetupParams(req, vs, img)
	local black = InBlack:GetValue(req).Value;		-- retrieve control values
	local white = InWhite:GetValue(req).Value;

	vs:SetParam(1, black);							-- and setup the shader's parameter values
	vs:SetParam(2, white);
	return true;
end


