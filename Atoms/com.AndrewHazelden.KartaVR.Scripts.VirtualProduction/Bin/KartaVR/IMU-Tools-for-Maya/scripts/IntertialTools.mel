/*
InertialTools.mel - 2019-12-10 01.03 AM

"Inertial Tools" is a Maya MEL proof-of-concept implementation of the open-source Madgwick's IMU and AHRS algorithms. This is an alpha grade tool that can be used as the basis for a reference implementation to build more complex pipeline tools/workflows.


For Madgwick's IMU and AHRS original C-code implementation see:
http://x-io.co.uk/open-source-imu-and-ahrs-algorithms/


Special thanks to Peregrine McCafferty for his help on this R&D effort, and for providing the sample "gopro-accl.csv", "gopro-gyro.csv", "gopro.mp4", and "gopro.wav" files used in the included Maya project.


## Version History ##

### 2012-02-19 v0.1 - SOH Madgwic ###

	Reference C-code IMU implementation

### 2018-03-06 v0.2 - Andrew Hazelden ###

	Ported C-code example to MEL script

### 2018-03-06 v1.0 - Andrew Hazelden ###

	MEL Quaternion to Matrix transform
	MEL Gyro and Accelerometer CSV Parser
	Automatic ImagePlane attachment
	
### 2019-12-10 v1.0 - Andrew Hazelden ###

	Packaged for inclusion with KartaVR's "Virtual Production" tools Reactor package.



## Bleeding Edge "Alpha Grade" MEL Script User's Guide ###

This script is a proof-of-concept implementation so a MEL GUI has not been constructed yet. It is intended you use this tool as a workbook like document/scratch pad to explore IMU workflows and the math involved.

To prepare the "InertialTools.mel" script for your use in Maya you need to do the following actions in a programmer's text editor:

Step 1. Update the following variables in the script with the actual filepath to your own assets:

	// Load the CSV files - Reactor for Fusion on macOS based filepath example:
	string $accelFilename = "/Library/Application Support/Blackmagic Design/Fusion/Reactor/Deploy/Bin/KartaVR/IMU-Tools-for-Maya/example/IMU-Track-Maya-Project/sourceimages/gopro-accl.csv";
	string $gyroFilename = "/Library/Application Support/Blackmagic Design/Fusion/Reactor/Deploy/Bin/KartaVR/IMU-Tools-for-Maya/example/IMU-Track-Maya-Project/sourceimages/gopro-gyro.csv";
	
	
Step 2. Update the filepath to the MP4 video in the "it_createNewCamera()" function:

	// Create the new camera - Reactor for Fusion on macOS based filepath example:
	string $cameraName[] = it_createNewCamera("InertialCamera", "/Library/Application Support/Blackmagic Design/Fusion/Reactor/Deploy/Bin/KartaVR/IMU-Tools-for-Maya/example/IMU-Track-Maya-Project/sourceimages/gopro.mp4", $totalVideoFrames);


Step 3. Copy the Maya 2018+ compatible "scripts/InertialTools.mel" file into your user account's Maya "scripts/" folder.

Step 4. Copy the Maya 2018+ compatible "shelves/shelf_IMU_Tools.mel" file into your user account's Maya "prefs/shelves/" folder.

Step 5. Copy the "IMU-Track-Maya-Project" example folder into your Maya "projects" folder. Then use the Maya "File > Set Project..." menu item to set the active project location. Restart Maya once to save the "Set Project" changes.

Step 6. Open the "IMU-Track-Example.ma" file up in Maya. Since the set project command was run, the MP4 movie "GOPR0430.MP4" that is attached to the imageplane on the camera will load correctly in Maya's persp view. And playing back the scene will show the result of the IMU based tracking process.


## Running the MEL Script ##

If the "InertialTools.mel" script was copied to the Maya "scripts" folder before Maya was started then you can source and run the script using the following MEL code in the Maya Script Editor window.

source "InertialTools.mel";
it_main();


*/

// ---------------------------------------------------------------------------------------------------
// AHRS algorithm update
global proc it_update(float $gx, float $gy, float $gz, float $ax, float $ay, float $az, float $mx, float $my, float $mz){
	// Sample frequency in Hz
	global float $sampleFreq;

	// 2 * proportional gain
	global float $betaDef;

	// Algorithm gain
	// 2 * proportional gain (Kp)
	global float $beta;

	// Quaternion position
	global float $q0;
	global float $q1;
	global float $q2;
	global float $q3;
	
	float $recipNorm;
	float $s0, $s1, $s2, $s3;
	float $qDot1, $qDot2, $qDot3, $qDot4;
	float $hx, $hy;
	float $_2q0mx, $_2q0my, $_2q0mz, $_2q1mx, $_2bx, $_2bz, $_4bx, $_4bz, $_2q0, $_2q1, $_2q2, $_2q3, $_2q0q2, $_2q2q3, $q0q0, $q0q1, $q0q2, $q0q3, $q1q1, $q1q2, $q1q3, $q2q2, $q2q3, $q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if(($mx == 0.0) && ($my == 0.0) && ($mz == 0.0)){
		it_updateIMU($gx, $gy, $gz, $ax, $ay, $az);
		return;
	}

	// Rate of change of quaternion from gyroscope
	$qDot1 = 0.5 * (-$q1 * $gx - $q2 * $gy - $q3 * $gz);
	$qDot2 = 0.5 * ($q0 * $gx + $q2 * $gz - $q3 * $gy);
	$qDot3 = 0.5 * ($q0 * $gy - $q1 * $gz + $q3 * $gx);
	$qDot4 = 0.5 * ($q0 * $gz + $q1 * $gy - $q2 * $gx);

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!(($ax == 0.0) && ($ay == 0.0) && ($az == 0.0))){
		// Normalise accelerometer measurement
		$recipNorm = it_invSqrt($ax * $ax + $ay * $ay + $az * $az);
		$ax = $ax * $recipNorm;
		$ay = $ay * $recipNorm;
		$az = $az * $recipNorm;

		// Normalise magnetometer measurement
		$recipNorm = it_invSqrt($mx * $mx + $my * $my + $mz * $mz);
		$mx = $mx * $recipNorm;
		$my = $my * $recipNorm;
		$mz = $mz * $recipNorm;

		// Auxiliary variables to avoid repeated arithmetic
		$_2q0mx = 2.0 * $q0 * $mx;
		$_2q0my = 2.0 * $q0 * $my;
		$_2q0mz = 2.0 * $q0 * $mz;
		$_2q1mx = 2.0 * $q1 * $mx;
		$_2q0 = 2.0 * $q0;
		$_2q1 = 2.0 * $q1;
		$_2q2 = 2.0 * $q2;
		$_2q3 = 2.0 * $q3;
		$_2q0q2 = 2.0 * $q0 * $q2;
		$_2q2q3 = 2.0 * $q2 * $q3;
		$q0q0 = $q0 * $q0;
		$q0q1 = $q0 * $q1;
		$q0q2 = $q0 * $q2;
		$q0q3 = $q0 * $q3;
		$q1q1 = $q1 * $q1;
		$q1q2 = $q1 * $q2;
		$q1q3 = $q1 * $q3;
		$q2q2 = $q2 * $q2;
		$q2q3 = $q2 * $q3;
		$q3q3 = $q3 * $q3;

		// Reference direction of Earth"s magnetic field
		$hx = $mx * $q0q0 - $_2q0my * $q3 + $_2q0mz * $q2 + $mx * $q1q1 + $_2q1 * $my * $q2 + $_2q1 * $mz * $q3 - $mx * $q2q2 - $mx * $q3q3;

		$hy = $_2q0mx * $q3 + $my * $q0q0 - $_2q0mz * $q1 + $_2q1mx * $q2 - $my * $q1q1 + $my * $q2q2 + $_2q2 * $mz * $q3 - $my * $q3q3;

		$_2bx = sqrt($hx * $hx + $hy * $hy);

		$_2bz = -$_2q0mx * $q2 + $_2q0my * $q1 + $mz * $q0q0 + $_2q1mx * $q3 - $mz * $q1q1 + $_2q2 * $my * $q3 - $mz * $q2q2 + $mz * $q3q3;

		$_4bx = 2.0 * $_2bx;

		$_4bz = 2.0 * $_2bz;

		// Gradient decent algorithm corrective step
		$s0 = -$_2q2 * (2.0 * $q1q3 - $_2q0q2 - $ax) + $_2q1 * (2.0 * $q0q1 + $_2q2q3 - $ay) - $_2bz * $q2 * ($_2bx * (0.5 - $q2q2 - $q3q3) + $_2bz * ($q1q3 - $q0q2) - $mx) + (-$_2bx * $q3 + $_2bz * $q1) * ($_2bx * ($q1q2 - $q0q3) + $_2bz * ($q0q1 + $q2q3) - $my) + $_2bx * $q2 * ($_2bx * ($q0q2 + $q1q3) + $_2bz * (0.5 - $q1q1 - $q2q2) - $mz);

		$s1 = $_2q3 * (2.0 * $q1q3 - $_2q0q2 - $ax) + $_2q0 * (2.0 * $q0q1 + $_2q2q3 - $ay) - 4.0 * $q1 * (1 - 2.0 * $q1q1 - 2.0 * $q2q2 - $az) + $_2bz * $q3 * ($_2bx * (0.5 - $q2q2 - $q3q3) + $_2bz * ($q1q3 - $q0q2) - $mx) + ($_2bx * $q2 + $_2bz * $q0) * ($_2bx * ($q1q2 - $q0q3) + $_2bz * ($q0q1 + $q2q3) - $my) + ($_2bx * $q3 - $_4bz * $q1) * ($_2bx * ($q0q2 + $q1q3) + $_2bz * (0.5 - $q1q1 - $q2q2) - $mz);

		$s2 = -$_2q0 * (2.0 * $q1q3 - $_2q0q2 - $ax) + $_2q3 * (2.0 * $q0q1 + $_2q2q3 - $ay) - 4.0 * $q2 * (1 - 2.0 * $q1q1 - 2.0 * $q2q2 - $az) + (-$_4bx * $q2 - $_2bz * $q0) * ($_2bx * (0.5 - $q2q2 - $q3q3) + $_2bz * ($q1q3 - $q0q2) - $mx) + ($_2bx * $q1 + $_2bz * $q3) * ($_2bx * ($q1q2 - $q0q3) + $_2bz * ($q0q1 + $q2q3) - $my) + ($_2bx * $q0 - $_4bz * $q2) * ($_2bx * ($q0q2 + $q1q3) + $_2bz * (0.5 - $q1q1 - $q2q2) - $mz);

		$s3 = $_2q1 * (2.0 * $q1q3 - $_2q0q2 - $ax) + $_2q2 * (2.0 * $q0q1 + $_2q2q3 - $ay) + (-$_4bx * $q3 + $_2bz * $q1) * ($_2bx * (0.5 - $q2q2 - $q3q3) + $_2bz * ($q1q3 - $q0q2) - $mx) + (-$_2bx * $q0 + $_2bz * $q2) * ($_2bx * ($q1q2 - $q0q3) + $_2bz * ($q0q1 + $q2q3) - $my) + $_2bx * $q1 * ($_2bx * ($q0q2 + $q1q3) + $_2bz * (0.5 - $q1q1 - $q2q2) - $mz);

		// Normalise step magnitude
		$recipNorm = it_invSqrt($s0 * $s0 + $s1 * $s1 + $s2 * $s2 + $s3 * $s3);
		$s0 = $s0 * $recipNorm;
		$s1 = $s1 * $recipNorm;
		$s2 = $s2 * $recipNorm;
		$s3 = $s3 * $recipNorm;

		// Apply feedback step
		$qDot1 = ($beta * $s0) - $qDot1;
		$qDot2 = ($beta * $s1) - $qDot2;
		$qDot3 = ($beta * $s2) - $qDot3;
		$qDot4 = ($beta * $s3) - $qDot4;
	}

	// Integrate rate of change of quaternion to yield quaternion
	$q0 = $q0 + $qDot1 * (1.0 / $sampleFreq);
	$q1 = $q1 + $qDot2 * (1.0 / $sampleFreq);
	$q2 = $q2 + $qDot3 * (1.0 / $sampleFreq);
	$q3 = $q3 + $qDot4 * (1.0 / $sampleFreq);

	// Normalise quaternion
	$recipNorm = it_invSqrt($q0 * $q0 + $q1 * $q1 + $q2 * $q2 + $q3 * $q3);
	$q0 = $q0 * $recipNorm;
	$q1 = $q1 * $recipNorm;
	$q2 = $q2 * $recipNorm;
	$q3 = $q3 * $recipNorm;
}

// ---------------------------------------------------------------------------------------------------
// IMU algorithm update

global proc it_updateIMU(float $gx, float $gy, float $gz, float $ax, float $ay, float $az){
	// Sample frequency in Hz
	global float $sampleFreq;

	// 2 * proportional gain
	global float $betaDef;

	// Algorithm gain
	// 2 * proportional gain (Kp)
	global float $beta;

	// Quaternion position
	global float $q0;
	global float $q1;
	global float $q2;
	global float $q3;
	
	float $recipNorm;
	float $s0, $s1, $s2, $s3;
	float $qDot1, $qDot2, $qDot3, $qDot4;
	float $_2q0, $_2q1, $_2q2, $_2q3, $_4q0, $_4q1, $_4q2, $_8q1, $_8q2, $q0q0, $q1q1, $q2q2, $q3q3;

	// Rate of change of quaternion from gyroscope
	$qDot1 = 0.5 * (-$q1 * $gx - $q2 * $gy - $q3 * $gz);
	$qDot2 = 0.5 * ($q0 * $gx + $q2 * $gz - $q3 * $gy);
	$qDot3 = 0.5 * ($q0 * $gy - $q1 * $gz + $q3 * $gx);
	$qDot4 = 0.5 * ($q0 * $gz + $q1 * $gy - $q2 * $gx);

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!(($ax == 0.0) && ($ay == 0.0) && ($az == 0.0))){
		// Normalise accelerometer measurement
		$recipNorm = it_invSqrt($ax * $ax + $ay * $ay + $az * $az);
		$ax = $ax * $recipNorm;
		$ay = $ay * $recipNorm;
		$az = $az * $recipNorm;

		// Auxiliary variables to avoid repeated arithmetic
		$_2q0 = 2.0 * $q0;
		$_2q1 = 2.0 * $q1;
		$_2q2 = 2.0 * $q2;
		$_2q3 = 2.0 * $q3;
		$_4q0 = 4.0 * $q0;
		$_4q1 = 4.0 * $q1;
		$_4q2 = 4.0 * $q2;
		$_8q1 = 8.0 * $q1;
		$_8q2 = 8.0 * $q2;
		$q0q0 = $q0 * $q0;
		$q1q1 = $q1 * $q1;
		$q2q2 = $q2 * $q2;
		$q3q3 = $q3 * $q3;

		// Gradient decent algorithm corrective step
		$s0 = $_4q0 * $q2q2 + $_2q2 * $ax + $_4q0 * $q1q1 - $_2q1 * $ay;

		$s1 = $_4q1 * $q3q3 - $_2q3 * $ax + 4.0 * $q0q0 * $q1 - $_2q0 * $ay - $_4q1 + $_8q1 * $q1q1 + $_8q1 * $q2q2 + $_4q1 * $az;

		$s2 = 4.0 * $q0q0 * $q2 + $_2q0 * $ax + $_4q2 * $q3q3 - $_2q3 * $ay - $_4q2 + $_8q2 * $q1q1 + $_8q2 * $q2q2 + $_4q2 * $az;

		$s3 = 4.0 * $q1q1 * $q3 - $_2q1 * $ax + 4.0 * $q2q2 * $q3 - $_2q2 * $ay;

		// Normalise step magnitude
		$recipNorm = it_invSqrt($s0 * $s0 + $s1 * $s1 + $s2 * $s2 + $s3 * $s3);
		$s0 = $s0 * $recipNorm;
		$s1 = $s1 * $recipNorm;
		$s2 = $s2 * $recipNorm;
		$s3 = $s3 * $recipNorm;

		// Apply feedback step
		$qDot1 = ($beta * $s0) - $qDot1;
		$qDot2 = ($beta * $s1) - $qDot2;
		$qDot3 = ($beta * $s2) - $qDot3;
		$qDot4 = ($beta * $s3) - $qDot4;
	}

	// Integrate rate of change of quaternion to yield quaternion
	$q0 = $q0 + $qDot1 * (1.0 / $sampleFreq);
	$q1 = $q1 + $qDot2 * (1.0 / $sampleFreq);
	$q2 = $q2 + $qDot3 * (1.0 / $sampleFreq);
	$q3 = $q3 + $qDot4 * (1.0 / $sampleFreq);

	// Normalise quaternion
	$recipNorm = it_invSqrt($q0 * $q0 + $q1 * $q1 + $q2 * $q2 + $q3 * $q3);
	$q0 = $q0 * $recipNorm;
	$q1 = $q1 * $recipNorm;
	$q2 = $q2 * $recipNorm;
	$q3 = $q3 * $recipNorm;
}

// ---------------------------------------------------------------------------------------------------
// Inverse Square-root
global proc float it_invSqrt(float $x){
	return 1/sqrt($x);
}

// ---------------------------------------------------------------------------------------------------
// Convert quaternion rotation to rotation matrix
// Source: http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToMatrix/
// Example: float $matrix3x3 [] = it_quaternionToMatrix("3x3")
// Example: float $matrix4x4 [] = it_quaternionToMatrix("4x4")
global proc float [] it_quaternionToMatrix(string $matrixMode){
	global float $q0;
	global float $q1;
	global float $q2;
	global float $q3;

//	float $qx = $q0; // x
//	float $qy = $q1; // y
//	float $qz = $q2; // z
//	float $qw = $q3; // w

	float $qx = $q0; // x
	float $qy = $q2; // z
	float $qz = $q1; // y
	float $qw = $q3; // w

	float $m00;
	float $m01;
	float $m02;

	float $m10;
	float $m11;
	float $m12;

	float $m20;
	float $m21;
	float $m22;

	// Calculate the square of the XYZW quaternion values
	float $sqr_qx = $qx * $qx;
	float $sqr_qy = $qy * $qy;
	float $sqr_qz = $qz * $qz;
	float $sqr_qw = $qw * $qw;

	// The inverse square length is required if the quaternion is not normalized
	float $inverse = 1 / ($sqr_qx + $sqr_qy + $sqr_qz + $sqr_qw);
	$m00 = ( $sqr_qx - $sqr_qy - $sqr_qz + $sqr_qw) * $inverse;
	$m11 = (-$sqr_qx + $sqr_qy - $sqr_qz + $sqr_qw) * $inverse;
	$m22 = (-$sqr_qx - $sqr_qy + $sqr_qz + $sqr_qw) * $inverse;

	float $tmp1 = $qx * $qy;
	float $tmp2 = $qz * $qw;
	$m10 = 2.0 * ($tmp1 + $tmp2) * $inverse;
	$m01 = 2.0 * ($tmp1 - $tmp2) * $inverse;

	$tmp1 = $qx * $qz;
	$tmp2 = $qy * $qw;

	$m20 = 2.0 * ($tmp1 - $tmp2) * $inverse;
	$m02 = 2.0 * ($tmp1 + $tmp2) * $inverse;

	$tmp1 = $qy * $qz;
	$tmp2 = $qx * $qw;

	$m21 = 2.0 * ($tmp1 + $tmp2) * $inverse;
	$m12 = 2.0 * ($tmp1 - $tmp2) * $inverse;
	
	if($matrixMode == "3x3"){
		// Provide a 3x3 matrix that could hold rotation data
		return {$m00, $m01, $m02,
						$m10, $m11, $m12,
						$m20, $m21, $m22};
	}else{
		// Provide a 4x4 matrix that could hold transform and rotation data
		return {$m00, $m01, $m02, 0.0,
						$m10, $m11, $m12, 0.0,
						$m20, $m21, $m22, 0.0,
						0.0, 0.0, 0.0, 1.0};
	}
}

// ---------------------------------------------------------------------------------------------------
// Tokenize one line of CSV data and extract the values
global proc string [] it_processLine(string $line, int $lineNumber){
	string $tokenizedList[];
	
	// Split apart the CSV elements at spaces or commas
	tokenizeList($line, $tokenizedList);
	int $elementCount = size($tokenizedList);

	return $tokenizedList;
}

// ---------------------------------------------------------------------------------------------------
// Debug print the result[] string array output
global proc it_displayResult(string $result [], int $lineNumber){
		print("[" + $lineNumber + "] ");
		for($i=0;$i<size($result);++$i) {
			print($result[$i] + "\t");
		}
		print("\n");
}

// Create the new camera in the scene
// Example: string $cameraName[] = it_createNewCamera("InertialCamera", "/Volumes/Media/Imageplane.mp4")
global proc string [] it_createNewCamera(string $name, string $imageName, float $frames){
	// Camera default settings
	float $camCenterOfInterest = 5.0;
	float $camLocatorScale = 10;
	float $camFocalLength = 35.0;
	float $camDepthOfField = 1.0;
	float $camDOFdistance = 10;
	float $camfStop = 5.6;
	float $camFocusRegionScale = 1.0;
	float $camShutterAngle = 144;
	float $camFarClipPlane =  1000;
	float $camHorizontalFilmAperture = 1.417;
	float $camVerticalFilmAperture = 0.945;
	float $camVerticalFilmOffset = 0;
	float $camHorizontalFilmOffset = 0;
	float $camOverscan = 1.0;
	float $camFilmFitOffset = 0;
	float $camLensSqueezeRatio = 1.0;
	float $camMotionBlur = 1.0;
	string $camFilmFit;

	// Starting camera view position for transform matrix
	string $fromObj = "persp";
	// float $master[16];
	// $master = getAttr($fromObj + ".matrix");
	
	// persp - Close View
	// Result: 1 0 0 0 0 0.927184 -0.374607 0 0 0.374607 0.927184 0 0 100 240 1//	
	// xform -ws -m 1 0 0 0 0 0.927184 -0.374607 0 0 0.374607 0.927184 0 0 100 240 1 $fromObj;

	// persp - Wide View
	// Result: 0.999781 0 -0.0209424 0 -0.00885066 0.906308 -0.422526 0 0.0189803 0.422619 0.906109 0 9.691203 215.786242 462.653209 1
	xform -ws -m 0.999781 0 -0.0209424 0 -0.00885066 0.906308 -0.422526 0 0.0189803 0.422619 0.906109 0 9.691203 215.786242 462.653209 1 $fromObj;

	// Set the selected camera to the persp camera name
	string $select[] = {$fromObj};

	// Focal length from the input camera
	$camFocalLength = getAttr($select[0]+".focalLength");

	// Anamorphic Lens Squeeze Ratio from the input camera
	$camLensSqueezeRatio = getAttr($select[0]+".lensSqueezeRatio");

	// Horizontal Film Aperture from the input camera
	$camHorizontalFilmAperture = getAttr($select[0]+".horizontalFilmAperture");

	// Horizontal Film Offset from the input camera
	$camHorizontalFilmOffset = getAttr($select[0]+".horizontalFilmOffset");

	// Vertical Film Aperture from the input camera
	$camVerticalFilmAperture = getAttr($select[0]+".verticalFilmAperture");

	// Vertical Film Offset from the input camera
	$camVerticalFilmOffset = getAttr($select[0]+".verticalFilmOffset");

	// Film Fit from the input camera
	$camFilmFit = getAttr($select[0]+".filmFit");

	// Overscan from the input camera
	$camOverscan = getAttr($select[0]+".overscan");

	// Motion Blur from the input camera
	$camMotionBlur = getAttr($select[0]+".motionBlur");

	// Shutter Angle from the input camera
	$camShutterAngle = getAttr($select[0]+".shutterAngle");

	// Far Clip Plane from the input camera
	$camFarClipPlane = getAttr($select[0]+".farClipPlane");

	// Check if DOF is enabled from the input camera
	$camDepthOfField = getAttr($select[0]+".depthOfField");

	// DOF distance from the input camera
	$camDOFdistance = getAttr($select[0]+".focusDistance");

	// F Stop value from the input camera
	$camfStop = getAttr($select[0]+".fStop");

	// DOF Focus Region Scale value from the input camera
	$camFocusRegionScale = getAttr($select[0]+".focusRegionScale");

	// Locator scale from input camera
	// $camLocatorScale = getAttr($select[0]+ ".locatorScale");

	// Add the camera to the scene
	string $camObject [] = `camera -n $name -centerOfInterest ($camCenterOfInterest) -focalLength ($camFocalLength) -lensSqueezeRatio ($camLensSqueezeRatio) -cameraScale 1 -horizontalFilmAperture ($camHorizontalFilmAperture) -horizontalFilmOffset ($camHorizontalFilmOffset) -verticalFilmAperture ($camVerticalFilmAperture) -verticalFilmOffset ($camVerticalFilmOffset) -filmFit ($camFilmFit) -overscan ($camOverscan) -motionBlur ($camMotionBlur) -shutterAngle ($camShutterAngle) -nearClipPlane 2 -farClipPlane ($camFarClipPlane)-depthOfField ($camDepthOfField) -focusDistance ($camDOFdistance) -fStop ($camfStop) -orthographic 0 -orthographicWidth 30 -panZoomEnabled 0 -horizontalPan 0 -verticalPan 0 -zoom 1`;

	// Set the size of the onscreen camera locator icon
	setAttr ($camObject[1] + ".locatorScale") $camLocatorScale;
	
	// Attach a movie file to the camera using an imageplane
	string $type = "movie";
	if (size($imageName)){
		source "importMovieImagePlane.mel";
		createImportedMovieImagePlane ({$camObject[1]}, $imageName, $type);
		
		// Enable the imagePlaneShape1 frame caching duration
		// @todo verify the element exists and is named correctly
		setAttr "imagePlaneShape1.fc" $frames;
	}

	return $camObject;
}

// ---------------------------------------------------------------------------------------------------
// Create the new scene
// Example: it_NewScene(25);
global proc it_NewScene(int $which){
	// Change the working time unit
	string $type = "";
	if($which == 1){
		$type = "game";
	}else if($which == 2){
		$type = "film";
	}else if($which == 3){
		$type = "pal";
	}else if($which == 4){
		$type = "ntsc";
	}else if($which == 5){
		$type = "show";
	}else if($which == 6){
		$type = "palf";
	}else if($which == 7){
		$type = "ntscf";
	}else if($which == 8){
		$type = "millisec";
	}else if($which == 9){
		$type = "sec";
	}else if($which == 10){
		$type = "min";
	}else if($which == 11){
		$type = "hour";
	}else if($which == 12){
		$type = "2fps";
	}else if($which == 13){
		$type = "3fps";
	}else if($which == 14){
		$type = "4fps";
	}else if($which == 15){
		$type = "5fps";
	}else if($which == 16){
		$type = "6fps";
	}else if($which == 17){
		$type = "8fps";
	}else if($which == 18){
		$type = "10fps";
	}else if($which == 19){
		$type = "12fps";
	}else if($which == 20){
		$type = "16fps";
	}else if($which == 21){
		$type = "20fps";
	}else if($which == 22){
		$type = "40fps";
	}else if($which == 23){
		$type = "75fps";
	}else if($which == 24){
		$type = "80fps";
	}else if($which == 25){
		$type = "100fps";
	}else if($which == 26){
		$type = "120fps";
	}else if($which == 27){
		$type = "125fps";
	}else if($which == 28){
		$type = "150fps";
	}else if($which == 29){
		$type = "200fps";
	}else if($which == 30){
		$type = "240fps";
	}else if($which == 31){
		$type = "250fps";
	}else if($which == 32){
		$type = "300fps";
	}else if($which == 33){
		$type = "375fps";
	}else if($which == 34){
		$type = "400fps";
	}else if($which == 35){
		$type = "500fps";
	}else if($which == 36){
		$type = "600fps";
	}else if($which == 37){
		$type = "750fps";
	}else if($which == 38){
		$type = "1200fps";
	}else if($which == 39){
		$type = "1500fps";
	}else if($which == 40){
		$type = "2000fps";
	}else if($which == 41){
		$type = "3000fps";
	}else if($which == 42){
		$type = "6000fps";
	}else{
		// Set the fallback default to 30fps
		$type = "ntsc";
	}
	optionVar -stringValue workingUnitTimeDefault $type;
	optionVar -stringValue workingUnitTime $type;
	
	// Create a new Maya scene
	file -force -new;
	
	print("[Working Unit Time] " +  $type + "\n");
}

// ---------------------------------------------------------------------------------------------------
// The Main Function
global proc it_main(){
	string $VERSION = "Version 1.0 - March 10, 2018";
	print("\n\n");
	print("[Inertial Tools for MEL] " + $VERSION + "\n\n");

	// ---------------------------------------------------------------------------------------------------
	// Load the CSV files - Reactor for Fusion on macOS based filepath example:
	string $accelFilename = "/Library/Application Support/Blackmagic Design/Fusion/Reactor/Deploy/Bin/KartaVR/IMU-Tools-for-Maya/example/IMU-Track-Maya-Project/sourceimages/gopro-accl.csv";
	string $gyroFilename = "/Library/Application Support/Blackmagic Design/Fusion/Reactor/Deploy/Bin/KartaVR/IMU-Tools-for-Maya/example/IMU-Track-Maya-Project/sourceimages/gopro-gyro.csv";

	// ---------------------------------------------------------------------------------------------------
	// Sample frequency in Hz
	global float $sampleFreq;

	// Pery's GoPro gyro data = 1000 ms / 2.55ms per sample = 392.2 Hz
	// Sample frequency in Hz
	$sampleFreq = 392;

	// ---------------------------------------------------------------------------------------------------
	// The rest of the variables
	
	// 2 * proportional gain
	global float $betaDef;

	// Algorithm gain
	// 2 * proportional gain (Kp)
	global float $beta;

	// Quaternion position
	global float $q0;
	global float $q1;
	global float $q2;
	global float $q3;

	// CSV extracted Gyro and Accelerometer
	float $globalTime;
	float $gx;
	float $gy;
	float $gz;
	float $ax;
	float $ay;
	float $az;

	// 2 * proportional gain
	// $betaDef = 0.1;
	$betaDef = 0.0;

	// Algorithm gain
	// 2 * proportional gain (Kp)
	$beta = $betaDef;

	// ---------------------------------------------------------------------------------------------------
	// Quaternion pre-rotation to align the IMU sensor relative to recorded image plane
	
	// Add a 90° initial rotation
	// $q0 = 1.0;
	// $q1 = 0.0;
	// $q2 = 0.0;
	// $q3 = 0.0;

	$q0 = 0.0;
	$q1 = 0.0;
	$q2 = 0.0;
	$q3 = -1.0;

	// print("[Quaternion Start]\t" + $q0 + ", " + $q1 + ", " + $q2 + ", " + $q3 + "\n");


	// ---------------------------------------------------------------------------------------------------
	// Load the full text files into a string array with one line used per array entry
	string $accelLines[] = freadAllLines($accelFilename);
	string $gyroLines[] = freadAllLines($gyroFilename);

	// Scaling factor to reduce the amount of samples
	int $dataReduceRate = 1;
	// int $dataReduceRate = 10;

	// Starting frame in the Maya timeline
	int $startFrame = 1;

	// Rewind to the start frame
	float $theTime = $startFrame;

	// A gyro IMU sample frame duration
	float $frameStep;
	
	// MP4 video frame rate
	float $frameRate = 25.0;

	// MP4 movie frame count
	float $totalVideoFrames = 177;

	// Count how many gyro samples there are (2381)
	float $totalSamples = size($gyroLines) - 1;

	// @Todo - Calculate the Maya timeline FPS and then sub-sample the IMU keyframes into real time units
	// Calculate the frame step value using "1 / Hz" sampling rate of the IMU data

	if($sampleFreq > 0){
		// 392 Hz = 0.002551020408163 frame/hz step value * 25 fps = 0.063775510204075 frame step
		$frameStep = (1 / $sampleFreq) * $frameRate;
		//$frameStep = $totalVideoFrames / $totalSamples;
	}else{
		// 1 frame per keyframe
		$frameStep = 1;
	}

	// Pal 25 fps frame rate
	it_NewScene(3);

	// ---------------------------------------------------------------------------------------------------
	currentTime($startFrame);

	// Set the Maya timeline start frame/end frame range.
	int $endTime = (float)($frameStep * $totalSamples);
	playbackOptions -e -min $startFrame -max $endTime -animationStartTime $startFrame -animationEndTime $endTime -playbackSpeed 0;

	// ---------------------------------------------------------------------------------------------------
	// Create the new camera - Reactor for Fusion on macOS based filepath example:
	string $cameraName[] = it_createNewCamera("InertialCamera", "/Library/Application Support/Blackmagic Design/Fusion/Reactor/Deploy/Bin/KartaVR/IMU-Tools-for-Maya/example/IMU-Track-Maya-Project/sourceimages/gopro.mp4", $totalVideoFrames);

	// Read the new camera's transform and shape node name
	string $cameraTransform = $cameraName[0];
	string $cameraShape = $cameraName[1];


	// ---------------------------------------------------------------------------------------------------
	// Scan through each line of the CSV files
	int $a = 0;
	for($g=0;$g<(size($gyroLines)/$dataReduceRate);++$g) {
		// Every 2nd line on the gyro counter is used to increment the acceleration counter by one with the help of the modulus % operator. This is done since the gyro runs at 2x sample rate of the accelerometer data.
		$a += $g % 2;

		// Tokenize one line of CSV data and extract the values
		string $gyroResult[] = it_processLine($gyroLines[$g], $g);
		string $accelResult[] = it_processLine($accelLines[$a], $a);

		// Debug print the result[] string array output
		// it_displayResult($gyroResult, $g);
		// it_displayResult($accelResult, $a);

		// Extract a line of CSV data
		if($g == 0) {
			// Line 1 CSV header row
			// print("#" + ", " + $gyroResult[0] + ", " + $gyroResult[1] + ", " + $gyroResult[2] + ", " + $gyroResult[3] + ", " + $accelResult[1] + ", " + $accelResult[2] + ", " + $accelResult[3] + "\n");

			// Line 1 quaternion header row
			// print("[#]" + ", " + "[ms]" + ", " + "[Q0]" + ", " + "[Q1]" + ", " + "[Q2]" + ", " + "[Q3]" + "\n");
		}else{
			// Line 2+ in the CSV files
			$globalTime = $gyroResult[0];
			$gx = $gyroResult[1];
			$gy = $gyroResult[2];
			$gz = $gyroResult[3];
			$ax = $accelResult[1];
			$ay = $accelResult[2];
			$az = $accelResult[3];

			// Line 2+ CSV gyro and accel data
			// print($g + ", " + $globalTime + ", " + $gx + ", " + $gy + ", " + $gz + ", " + $ax + ", " + $ay + ", " + $az + "\n");

			// Line 2+ quaternion data
			it_updateIMU($gx, $gy, $gz, $ax, $ay, $az);
			// print($g + ", " + $globalTime + ", " + $q0 + ", " + $q1 + ", " + $q2 + ", " + $q3 + "\n");

			// Advance playhead
			$theTime = `currentTime -query` + $frameStep;
			currentTime($theTime);

			// Display the current frame number
			// print("[Current Frame] " + ($theTime) + "\n");

			// Display Gyro global time
			// print("\n\n" + $globalTime + " Ms\n");

			// float $matrix3x3 [] = it_quaternionToMatrix("3x3");
			// print("\n\t" + "[3x3 Matrix]" + "\n");
			// print("\t" + $matrix3x3[0] + ", " + $matrix3x3[1] + ", " + $matrix3x3[2] + "\n");
			// print("\t" + $matrix3x3[3] + ", " + $matrix3x3[4] + ", " + $matrix3x3[5] + "\n");
			// print("\t" + $matrix3x3[6] + ", " + $matrix3x3[7] + ", " + $matrix3x3[8] + "\n");

			float $matrix4x4 [] = it_quaternionToMatrix("4x4");
			// print("\n\t" + "[4x4 Matrix]" + "\n");
			// print("\t" + $matrix4x4[0] + ", " + $matrix4x4[1] + ", " + $matrix4x4[2] + ", " + $matrix4x4[3] + "\n");
			// print("\t" + $matrix4x4[4] + ", " + $matrix4x4[5] + ", " + $matrix4x4[6] + ", " + $matrix4x4[7] + "\n");
			// print("\t" + $matrix4x4[8] + ", " + $matrix4x4[9] + ", " + $matrix4x4[10] + ", " + $matrix4x4[11] + "\n");
			// print("\t" + $matrix4x4[12] + ", " + $matrix4x4[13] + ", " + $matrix4x4[14] + ", " + $matrix4x4[15] + "\n");

			// Move the camera using the IMU 4x4 matrix data
			xform -ws -m $matrix4x4[0] $matrix4x4[1] $matrix4x4[2] $matrix4x4[3] $matrix4x4[4] $matrix4x4[5] $matrix4x4[6] $matrix4x4[7] $matrix4x4[8] $matrix4x4[9] $matrix4x4[10] $matrix4x4[11] $matrix4x4[12] $matrix4x4[13] $matrix4x4[14] $matrix4x4[15] $cameraName[0];

			// Keyframe the new camera position
			setKeyframe -at translate -at rotate $cameraName[0];

			// Clean the matrix
			clear $matrix4x4;
		}

		// Reset the camera scale to avoid any rendering issues
		setAttr ($cameraTransform + ".scaleX") 1;
		setAttr ($cameraTransform + ".scaleY") 1;
		setAttr ($cameraTransform + ".scaleZ") 1;

		// Look through the new camera
		//lookThroughModelPanelClipped $cameraShape modelPanel4 1 10000;
	}

	// Set the Maya timeline start frame/end frame range.
	int $endTime = $theTime;
	playbackOptions -e -min $startFrame -max $endTime -animationStartTime $startFrame -animationEndTime $endTime -playbackSpeed 0 -maxPlaybackSpeed $frameRate ;
	
	print("\n[Done]" + "\n");
}

// Run the script
// it_main();
