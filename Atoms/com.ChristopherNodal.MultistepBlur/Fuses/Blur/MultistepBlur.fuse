--[[--
Multistep Blur

Copyright (c) 2018, Christopher Nodal

Built upon the BzMultistepBlur fuse by Gregory Chalenko and Roman Fedotov
Useful when you want to create realistic complex blur or glow

BzMultistepBlur updated on 2010-11-08 by Stefan Ihringer to fix the use of an uninitialized image
buffer that lead to random flickering. Also added progress indicator.

Christopher Nodal	- initial re-release 1.0 26/02/2018
					- (temp) remove Multi-box filter option
					- code cleanup (mostly layout)
					- translation of Russian comments
					- add REG_version
					- change REGS_Category
					- add Glow functionality
					- fixed RGBA channel toggles
--]]--

FuRegisterClass("MultistepBlur", CT_Tool, {
	REGS_Name = "Multistep Blur",
	REGS_Category = "Blur",
	REGS_OpIconString = "MBlur",
	REGS_OpDescription = "Multistep Blur",
	REG_NoMotionBlurCtrls = true,
	REG_NoBlendCtrls = true,
	REG_Fuse_NoEdit     = true,
	REG_Fuse_NoReload   = true,
	REG_Version = 100,
	})
 
function Create()

	InOp = self:AddInput("Operation", "Operation", {
		LINKID_DataType = "Number",
		INPID_InputControl = "MultiButtonControl",
		INP_Default = 0,
		{MBTNC_AddButton = "Blur", 	MBTNCD_ButtonWidth = 0.5, },
		{MBTNC_AddButton = "Glow", 	MBTNCD_ButtonWidth = 0.5, },		
		INP_DoNotifyChanged = true, -- We want to hear about changes on this control
		})
		
	InGlowFilter = self:AddInput("Glow Filter", "GlowFilter", {
		LINKID_DataType = "Number",
		INPID_InputControl = "MultiButtonControl",
		INP_Default = 2,
		{MBTNC_AddButton = "Soften", 	MBTNCD_ButtonWidth = 0.33, },
		{MBTNC_AddButton = "Bartlett", 	MBTNCD_ButtonWidth = 0.34, },
		--{MBTNC_AddButton = "Multi-box", MBTNCD_ButtonWidth = 0.25, },
		{MBTNC_AddButton = "Gaussian", MBTNCD_ButtonWidth = 0.33, },
		{MBTNC_AddButton = "Blend", 	MBTNCD_ButtonWidth = 0.33, },
		{MBTNC_AddButton = "Hilight", 	MBTNCD_ButtonWidth = 0.34, },
		{MBTNC_AddButton = "Solarize", 	MBTNCD_ButtonWidth = 0.33, },		
		INP_DoNotifyChanged = true, -- We want to hear about changes on this control
		})
		
	InBlurFilter = self:AddInput("Blur Filter", "BlurFilter", {
		LINKID_DataType = "Number",
		INPID_InputControl = "MultiButtonControl",
		INP_Default = 3,
		{MBTNC_AddButton = "Box", 		MBTNCD_ButtonWidth = 0.25, },
		{MBTNC_AddButton = "Soften", 	MBTNCD_ButtonWidth = 0.25, },
		{MBTNC_AddButton = "Bartlett", 	MBTNCD_ButtonWidth = 0.25, },
		--{MBTNC_AddButton = "Multi-box", MBTNCD_ButtonWidth = 0.2, },
		{MBTNC_AddButton = "Gaussian", 	MBTNCD_ButtonWidth = 0.25, },
		INP_DoNotifyChanged = true, -- We want to hear about changes on this control
		})

	InR = self:AddInput("Red", "Red", {
		LINKID_DataType = "Number",
		INPID_InputControl = "CheckboxControl",
		INP_Integer = true,
		INP_Default = 1,
		ICD_Width = 0.25,
		})		

	InG = self:AddInput("Green", "Green", {
		LINKID_DataType = "Number",
		INPID_InputControl = "CheckboxControl",
		INP_Integer = true,
		INP_Default = 1,
		ICD_Width = 0.25,
		})		

	InB = self:AddInput("Blue", "Blue", {
		LINKID_DataType = "Number",
		INPID_InputControl = "CheckboxControl",
		INP_Integer = true,
		INP_Default = 1,
		ICD_Width = 0.25,
		})		

	InA = self:AddInput("Alpha", "Alpha", {
		LINKID_DataType = "Number",
		INPID_InputControl = "CheckboxControl",
		INP_Integer = true,
		INP_Default = 1,
		ICD_Width = 0.25,
		})		
		
	InLockXY = self:AddInput("Lock X/Y", "LockXY", {
		LINKID_DataType = "Number",
		INPID_InputControl = "CheckboxControl",
		INP_Integer = true,
		INP_Default = 1.0,
		INP_DoNotifyChanged = true, -- We want to hear about changes on this control
		})
		
	InBlurStartX = self:AddInput("X Minimum Blur", "XMinimumBlur", {
		LINKS_Name = "Blur Size",
		LINKID_DataType = "Number",
		INPID_InputControl = "SliderControl",
		INP_MaxScale = 300.0,
		INP_MinScale = 0.0,
		INP_Default = 20.0,
		})		

	InBlurStartY = self:AddInput("Y Minimum Blur", "YMinimumBlur", {
		LINKID_DataType = "Number",
		INPID_InputControl = "SliderControl",
		INP_MaxScale = 300.0,
		INP_MinScale = 0.0,
		INP_Default = 20.0,
		IC_Visible = false,
		})		
	
	InBlurEndX = self:AddInput("X Maximum Blur", "XMaximumBlur", {
		LINKS_Name = "Blur Size",
		LINKID_DataType = "Number",
		INPID_InputControl = "SliderControl",
		INP_MaxScale = 300.0,
		INP_MinScale = 0.0,
		INP_Default = 100.0,
		})		

	InBlurEndY = self:AddInput("Y Maximum Blur", "YMaximumBlur", {
		LINKID_DataType = "Number",
		INPID_InputControl = "SliderControl",
		INP_MaxScale = 300.0,
		INP_MinScale = 0.0,
		INP_Default = 100.0,
		IC_Visible = false,
		})		
	
	InCount = self:AddInput("Steps", "Steps", {
		LINKID_DataType = "Number",
		INPID_InputControl = "SliderControl",
		INP_MaxScale = 16.0,
		INP_MinScale = 1.0,
		INP_Default = 4.0,
		INP_MaxAllowed = 64.0,
		INP_Integer = true,
		})	

	InExp = self:AddInput("Steps Bias", "StepsBias", {
		LINKID_DataType = "Number",
		INPID_InputControl = "SliderControl",
		INP_MaxScale = 3.0,
		INP_MinScale = -3.0,
		INP_Default = 0.0,
		})	

	InPasses = self:AddInput("Num Passes", "NumPasses", {
		LINKID_DataType = "Number",
		INPID_InputControl = "SliderControl",
		INP_MaxScale = 16.0,
		INP_Default = 4.0,
		INP_MaxAllowed = 64.0,
		INP_Integer = true,
		IC_Visible = false,
		})
		
	InGlow = self:AddInput("Glow", "Glow", {
		LINKID_DataType = "Number",
		INPID_InputControl = "SliderControl",
		INP_MaxScale = 1.0,
		INP_Default = 0.8,
		})

	InGlow = self:AddInput("Glow", "Glow", {
		LINKID_DataType = "Number",
		INPID_InputControl = "SliderControl",
		INP_MaxScale = 1.0,
		INP_Default = 0.8,
		})
		
	InBlend = self:AddInput("Blend" , "Blend", {
		LINKID_DataType = "Number",
		INPID_InputControl = "SliderControl",
		INP_MaxScale = 1.0,
		INP_MaxAllowed = 1.0,
		INP_Default = 1.0,
		})
	
------------------------------------------------------------------------------------------{{{
	InGradStartR = self:AddInput("Red1", "Red1", {
		LINKID_DataType = "Number",
		INPID_InputControl = "ColorControl",
		INP_MinScale = 0.0,
		INP_MaxScale = 1.0,
		INP_Default  = 1.0,
		ICS_Name = "Color min",
		IC_ControlGroup = 1,
		IC_ControlID = 0,
		})
		
	InGradStartG = self:AddInput("Green1", "Green1", {
		LINKID_DataType = "Number",
		INPID_InputControl = "ColorControl",
		INP_MinScale = 0.0,
		INP_MaxScale = 1.0,
		INP_Default  = 1.0,
		IC_ControlGroup = 1,
		IC_ControlID = 1,
		})
		
	InGradStartB = self:AddInput("Blue1", "Blue1", {
		LINKID_DataType = "Number",
		INPID_InputControl = "ColorControl",
		INP_MinScale = 0.0,
		INP_MaxScale = 1.0,
		INP_Default  = 1.0,
		IC_ControlGroup = 1,
		IC_ControlID = 2,
		})
	------------------------------------------------------------------------------------------
	InGradEndR = self:AddInput("Red2", "Red2", {
		LINKID_DataType = "Number",
		INPID_InputControl = "ColorControl",
		INP_MinScale = 0.0,
		INP_MaxScale = 1.0,
		INP_Default  = 1.0,
		ICS_Name = "Color max",
		IC_ControlGroup = 2,
		IC_ControlID = 0,
		})
		
	InGradEndG = self:AddInput("Green2", "Green2", {
		LINKID_DataType = "Number",
		INPID_InputControl = "ColorControl",
		INP_MinScale = 0.0,
		INP_MaxScale = 1.0,
		INP_Default  = 1.0,
		IC_ControlGroup = 2,
		IC_ControlID = 1,
		})
		
	InGradEndB = self:AddInput("Blue2", "Blue2", {
		LINKID_DataType = "Number",
		INPID_InputControl = "ColorControl",
		INP_MinScale = 0.0,
		INP_MaxScale = 1.0,
		INP_Default  = 1.0,
		IC_ControlGroup = 2,
		IC_ControlID = 2,
		})
------------------------------------------------------------------------------------------}}}

	self:BeginControlNest("Color Scale", "ColorScale", false, {})
	
		InScaleR = self:AddInput("Red Scale", "RedScale", {
			LINKID_DataType = "Number",
			INPID_InputControl = "SliderControl",
			INP_MaxScale = 2.0,
			INP_Default = 1.0,
			})		
		InScaleG = self:AddInput("Green Scale", "GreenScale", {
			LINKID_DataType = "Number",
			INPID_InputControl = "SliderControl",
			INP_MaxScale = 2.0,
			INP_Default = 1.0,
			})
		InScaleB = self:AddInput("Blue Scale", "BlueScale", {
			LINKID_DataType = "Number",
			INPID_InputControl = "SliderControl",
			INP_MaxScale = 2.0,
			INP_Default = 1.0,
			})
		InScaleA = self:AddInput("Alpha Scale", "AlphaScale", {
			LINKID_DataType = "Number",
			INPID_InputControl = "SliderControl",
			INP_MaxScale = 2.0,
			INP_Default = 1.0,
			})		
	self:EndControlNest()
	
	InImage = self:AddInput("Input", "Input", {
		LINKID_DataType = "Image",
		LINK_Main = 1,
		})

	OutImage = self:AddOutput("Output", "Output", {
		LINKID_DataType = "Image",
		LINK_Main = 1,
		})				

end


function NotifyChanged(inp, param, time)
	if inp == InLockXY then   -- Update our sliders
		local locked = (param.Value > 0.5)
		
		if locked then
			InBlurStartX:SetAttrs({ LINKS_Name = "Minimum Blur" })
			InBlurStartY:SetAttrs({ IC_Visible = false })
			InBlurEndX:SetAttrs({ LINKS_Name = "Maximum Blur" })
			InBlurEndY:SetAttrs({ IC_Visible = false })
		else
			InBlurStartX:SetAttrs({ LINKS_Name = "X Minimum Blur" })
			InBlurStartY:SetAttrs({ IC_Visible = true })
			InBlurEndX:SetAttrs({ LINKS_Name = "X Maximum Blur" })
			InBlurEndY:SetAttrs({ IC_Visible = true })

		end
	elseif inp == InOp then
		InBlurFilter:SetAttrs({ IC_Visible = (param.Value == 0), })
		InGlowFilter:SetAttrs({ IC_Visible = (param.Value == 1), })
		InGlow:SetAttrs({ IC_Visible = (param.Value == 1), })
--	Multi-box is off
--	elseif inp == InFilter then
	
--		InPasses:SetAttrs({ IC_Visible = (param.Value == 3), })
	end
end


function rgbToHsv( r, g, b) 
	local cMin = math.min( r, g, b )
	local cMax = math.max( r, g, b )
	local delta = cMax - cMin
	local v = cMax
	local s = 0
	local h = 0
	if v ~= 0 then
		s = delta / cMax 
	else
		s = 0
	end
	if s == 0 then
		h = 0
	else
		if r == v then
			h = (g -b )/ delta
		else
			if g == v then
				h = 2 + (b - r) / delta
			else
				h = 4 + (r-g)/delta
			end
		end
		h = h * 60
		if h < 0 then
			h = h + 360
		end
	end
	return h, s, v
end


function hsvToRgb( h, s, v)
	if s == 0 then
		if h == 0 then 
			return v, v, v
		else 
			return 0, 0, 0
		end
	else
		if h == 360 then 
			h = 0
		end
		h = h / 60
		local i = math.floor( h )
		local f = h - i
		local p = v * ( 1 - s )
		local q = v * ( 1 - s * f )
		local t = v * ( 1 - s * (1 - f))
		if i == 0 then
			return v, t, p
		elseif i == 1 then
			return  q, v, p
		elseif i == 2 then
			return  p, v, t
		elseif i == 3 then
			return p, q, v
		elseif i == 4 then
			return t, p, v
		elseif i == 5 then
			return v, p, q
		end
	end
end


function exponent( x, count,  n,  minBlur, maxBlur ) --{{{
-- x - current step number
-- count - number of steps
-- n - exponent
-- minBlur maxBlur - blur limits
--------------------------------------------------------------------------------------------
--f2(x,count, n, minBlur, maxBlur ) = minBlur + (maxBlur - minBlur)*(x / (count-1 + 0.0001) )**n
	local nn = 0
	if n >= 0 then
		nn = n + 1
	else
		nn = -1.0 / ( n - 1)
	end
	return  minBlur + (maxBlur - minBlur)*(x / (count-1 + 0.0001) )^nn
end --}}}


function interpolate3( x, count,  n, v1, v2, v3, a1, a2, a3 )
-- x - current step number
-- count - number of steps
-- n - exponent
-- v1, v2, v3,     a1, a2, a3 - interpolation colors?

	if a1 - v1 > 180 then
		v1 = v1 + 360
	elseif a1 - v1 < -180 then
		a1 = a1 +  360
	end


	local nn = 0
	if n >= 0 then
		nn = n + 1
	else
		nn = -1.0 / ( n - 1)
	end
	local k = (x / (count-1 + 0.0001) )^nn
	return		(v1 + (a1 - v1)*k) % 360 ,
						v2 + (a2 - v2)*k,
						v3 + (a3 - v3)*k 
end

function Process(req) 

	local img = InImage:GetValue(req)
	
	local op = InOp:GetValue(req).Value
	local blurStart_x = InBlurStartX:GetValue(req).Value-- / 720
	local blurEnd_x = InBlurEndX:GetValue(req).Value --/ 720
	local locked = (InLockXY:GetValue(req).Value > 0.5)
	
	if locked == true then 
		blurStart_y = blurStart_x
		blurEnd_y = blurEnd_x
	else
		blurStart_y = InBlurStartY:GetValue(req).Value --/ 720
		blurEnd_y = InBlurEndY:GetValue(req).Value --/ 720
	end
	
	local glowfilter = InGlowFilter:GetValue(req).Value
	local blurfilter = InBlurFilter:GetValue(req).Value
	local do_r = InR:GetValue(req).Value
	local do_g = InG:GetValue(req).Value
	local do_b = InB:GetValue(req).Value
	local do_a = InA:GetValue(req).Value
	local scale_r = InScaleR:GetValue(req).Value
	local scale_g = InScaleG:GetValue(req).Value
	local scale_b = InScaleB:GetValue(req).Value
	local scale_a = InScaleA:GetValue(req).Value
	local glow = 1.0 - InGlow:GetValue(req).Value
	local passes = math.floor( InPasses:GetValue(req).Value + 0.5 ) -- make damn sure this is an integer
	local blend = InBlend:GetValue(req).Value
	
	local result = Image({IMG_Like = img})
	-- added 2010-11-08: uninitialized result image was causing random flickering
	result:Fill(Pixel({R = 0, G = 0, B = 0, A = 0}))
	local tmpImg = Image({IMG_Like = img})
	
	--local filters = {"Soften", "Bartlett", "Multi-box", "Gaussian", "Blend", "Hilight", "Solarise"}
	local glowfilters = {"Soften", "Bartlett", "Gaussian", "Blend", "Hilight", "Solarise"}
	local blurfilters = {"Box", "Soften", "Bartlett", "Gaussian"}
	local filter
	
	if op == 0 then
		filter = blurfilters[blurfilter+1]
	elseif op == 1 then
		filter = glowfilters[glowfilter+1]
	end
	
	------------------------------------------------------------------------------------------
	local start_h = InGradStartR:GetValue(req).Value
	local start_s = InGradStartG:GetValue(req).Value
	local start_v = InGradStartB:GetValue(req).Value
	start_h, start_s, start_v = rgbToHsv( start_h, start_s, start_v )
	
	local end_h = InGradEndR:GetValue(req).Value
	local end_s = InGradEndG:GetValue(req).Value
	local end_v = InGradEndB:GetValue(req).Value
	end_h, end_s, end_v = rgbToHsv( end_h, end_s, end_v )
		--print("------------------")
		--print( start_h, start_s, start_v)
		--print( end_h, end_s, end_v )
	--print("------------------------------------------------------------------------------------------\n")
	local expVal = InExp:GetValue(req).Value
	
	local count = InCount:GetValue(req).Value

	local blendCoeff = 1.0 / count
	--print( "blendCoeff ", blendCoeff )

	self:SetProgress(0)
	
	for i = 0, count-1 do
		local curBlur_x = exponent( i, count,  expVal,  blurStart_x, blurEnd_x )
		local curBlur_y = exponent( i, count,  expVal,  blurStart_y, blurEnd_y )
		--print( "curBlur_x ", curBlur_x )
		img:Blur(tmpImg, {
			BLUR_Type = filter,
			BLUR_Red = do_r == 1 and true or false,
			BLUR_Green = do_g == 1 and true or false,
			BLUR_Blue = do_b == 1 and true or false,
			BLUR_Alpha = do_a == 1 and true or false,
			BLUR_XSize = curBlur_x / 720, 
			BLUR_YSize = curBlur_y / 720,
			BLUR_Blend = 1.0,
			BLUR_Normalize = op==1 and glow or 1.0,
			BLUR_Passes = passes,
			BLUR_RedScale = scale_r,
			BLUR_GreenScale = scale_g,
			BLUR_BlueScale = scale_b,
			BLUR_AlphaScale = scale_a,
			})

		r, g, b = interpolate3( i, count, expVal, start_h, start_s, start_v, end_h, end_s, end_v )
		r, g, b = 	hsvToRgb( r, g, b)
		tmpImg = tmpImg:ChannelOpOf("Multiply", nil, { R = r, G = g, B = b, A = 1.0})
		result = result:BlendOf(tmpImg, blendCoeff )
		self:SetProgress((i+1) / count)
	end

	result = img:BlendOf(result, blend)

	OutImage:Set(req, result)
end