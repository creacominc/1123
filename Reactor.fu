--[[--
==============================================================================
Reactor Package Manager for Fusion - v1.0 2018-01-22
==============================================================================
Requires    : Fusion 9.0.1+
Created by  : We Suck Less Community   [https://www.steakunderwater.com]
            : Pieter Van Houte         [pieter@steakunderwater.com]
            : Andrew Hazelden          [andrew@andrewhazelden]

==============================================================================
Overview
==============================================================================
Reactor is a package manager for Fusion (Free) and Fusion Studio. Reactor streamlines the installation of 3rd party content through the use of "Atom" packages that are synced automatically with a Git repository.

Reactor GitLab Public Repository:
https://gitlab.com/WeSuckLess/Reactor

Reactor Support Forum:
https://www.steakunderwater.com/wesuckless/viewforum.php?f=32

==============================================================================
Installation
==============================================================================
Copy the `Reactor.fu` file into the Fusion user preferences based `Config:/` PathMap directory, or the "Config" subfolder in the Fusion installation folder:

(Windows) C:\Program Files\Blackmagic Design\Fusion 9\Config\
(Linux)   /opt/BlackmagicDesign/Fusion9/Config/
(Mac)     /Applications/Blackmagic Fusion 9/Fusion.app/Contents/MacOS/Config/

You may have to create this folder if it does not exist yet.

Restart Fusion after the installation is complete.

==============================================================================
Reactor Usage
==============================================================================
After Reactor.fu is installed on your system and you restart Fusion once you will see a new "Reactor" menu item is added to Fusion's menu bar.

The main Reactor Package Manager window is opened by selecting the "Reactor > Open Reactor..." menu item.

The "Reactor > Show Reactor Folder" menu item allows you to quickly view the "AllData:/Reactor/" PathMap folder location where the Reactor "atom" packages are downloaded and installed.

The "AllData:/Reactor/" PathMap folder location is:

(Windows) C:\ProgramData\Blackmagic Design\Fusion\Reactor\
(Linux) /var/BlackmagicDesign/Fusion/Reactor/
(Mac) /Library/Application Support/Blackmagic Design/Fusion/

==============================================================================
Environment Variables
==============================================================================
The `REACTOR_DEBUG` environment variable can be set to true if you want to see more verbose Console logging output when you run the Reactor GUI:

export REACTOR_DEBUG=true

The `REACTOR_DEBUG_FILES` environment variable can be set to true if you want to see Console logging output that shows each of the cURL based file download operations. When the environment variable is set to true Reactor will print the contents of the files as they are downloaded and written to disk. This debugging information is useful for spotting formatting issues and "Error 404" states when a file has trouble successfully downloading from GitLab:

export REACTOR_DEBUG_FILES=true

The `REACTOR_BRANCH` environment variable can be set to a custom value like "dev" to override the default master branch setting for syncing with the GitLab repo:

export REACTOR_BRANCH=dev

Note: If you are using macOS you will need to use an approach like a LaunchAgents file to define the environment variables as Fusion + Lua tends to ignore .bash_profile based environment variables entries.

The `REACTOR_INSTALL_PATHMAP` environment variable can be used to change the Reactor installation location to something other then the default PathMap value of "AllData:"

export REACTOR_INSTALL_PATHMAP=AllData:

]]--

{
	Action
	{
		ID = "Reactor_Open",
		Category = "Reactor",
		Name = "Open Reactor...",

		Targets =
		{
			Composition =
			{
				Execute = _Lua [=[
					-- This GitLab based Project ID is used to download "Reactor.lua"
					local reactor_project_id = "5058837"

					-- The release_mode is used to toggle Reactor between a "public" vs "dev" state.
					-- In the "public" mode a GitLab Token ID is not required.
					-- local release_mode = "dev"
					local release_mode = "public"
					
					ffi = require "ffi"
					curl = require "lj2curl"
					ezreq = require "lj2curl.CRLEasyRequest"

					local separator = package.config:sub(1,1)
					local local_system = os.getenv("REACTOR_LOCAL_SYSTEM")
					local reactor_pathmap = os.getenv("REACTOR_INSTALL_PATHMAP") or "AllData:"
					local path = app:MapPath(tostring(reactor_pathmap) .. "Reactor/System/")
					local destFile = path .. "Reactor.lua"

					local branch = os.getenv("REACTOR_BRANCH")
					if branch == nil then
						branch = "master"
					end

					bmd.createdir(path)

					local config = bmd.readfile(path .. "Reactor.cfg")

					local token = config and config.Settings and config.Settings.Reactor and config.Settings.Reactor.Token
					if not token or #token == 0 then
						-- For now, let's just create a new config file if there's no token.
						bmd.writefile(path .. "Reactor.cfg", {
							Repos = {
								GitLab = {
									Projects = {
										Reactor = reactor_project_id,
									},
								},
							},
							Settings = {
								Reactor =
								{
									Token = "",
								},
							},
						})

						-- Skip checking for the GitLab Token ID when Reactor is running in the public mode.
						if release_mode ~= "public" then
							error("[Reactor Error] No private GitLab token was found in the config file. Please edit " .. path .. "Reactor.cfg and add your token.")
						end
					end

					if local_system then
						local file = io.open(local_system .. separator .. "Reactor.lua", "r")
						local str = file:read("*all")
						file:close()

						file = io.open(destFile, "w")
						file:write(str)
						file:close()

						target:RunScript(destFile)
					else
						local url = "https://gitlab.com/api/v4/projects/" .. reactor_project_id .. "/repository/files/System%2FReactor%2Elua/raw?ref=" .. branch

						if token then
							url = url .. "&private_token=" .. token
						end

						local file = io.open(destFile, "r")
						local doFetch = true -- file == nil or file:read(1) == nil

						if file then
							file:close()
						end

						if doFetch then
							local req = ezreq(url)

							local body = {}

							req:setOption(curl.CURLOPT_SSL_VERIFYPEER, 0)
							req:setOption(curl.CURLOPT_WRITEFUNCTION, ffi.cast("curl_write_callback",
								function(buffer, size, nitems, userdata)
									table.insert(body, ffi.string(buffer, size*nitems))
									return nitems;
								end))

							ok, err = req:perform()
							if ok then
								-- Check if the Reactor.lua file was downloaded correctly
								if table.concat(body) == [[{"message":"401 Unauthorized"}]] then 
									error("[Reactor Download Failed] 401 Unauthorized\n\n[Pro Tip] You should double check that you are syncing with the Reactor public repository in your \"Config:/Reactor.fu\" and \"Reactor:/System/Reactor.cfg\" files.")
								elseif table.concat(body) == [[{"message":"404 Project Not Found"}]] then 
									error("[Reactor Download Failed] 404 GitLab Project Not Found\n\n[Pro Tip] You should double check that you are syncing with the Reactor public repository in your \"Config:/Reactor.fu\" and \"Reactor:/System/Reactor.cfg\" files.")
								elseif table.concat(body) == [[{"message":"404 File Not Found"}]] then 
									error("[Reactor Download Failed] 404 File Not Found\n\n[Pro Tip] The main Reactor GitLab file has been renamed. Please download and install a new Reactor Installer script or you can try manually installing the latest Reactor.fu file.")
								else
									local file = io.open(destFile, "w")
									file:write(table.concat(body))
									file:close()
									target:RunScript(destFile)
								end
							else
								print("[Reactor Error] fetch failed: ", err)
							end
						else
							target:RunScript(destFile)
						end
					end
				]=],
			},
		},
	},
	Action
	{
		ID = "Reactor_Atomizer",
		Category = "Reactor",
		Name = "Atomizer",

		Targets =
		{
			Composition =
			{
				Execute = _Lua [=[
					local reactor_pathmap = os.getenv("REACTOR_INSTALL_PATHMAP") or "AllData:"
					local scriptPath = app:MapPath(tostring(reactor_pathmap) .. "Reactor/System/UI/Atomizer.lua")
					if bmd.fileexists(scriptPath) == false then
						print("[Reactor Error] Open the Reactor window once to download the missing file: " .. scriptPath)
					else
						target:RunScript(scriptPath)
					end
				]=],
			},
		},
	},
	Action
	{
		ID = "Reactor_Folder",
		Category = "Reactor",
		Name = "Show Reactor Folder",

		Targets =
		{
			Composition =
			{
				Execute = _Lua [=[
					local reactor_path = os.getenv("REACTOR_INSTALL_PATHMAP") or "AllData:"
					local path = app:MapPath(tostring(reactor_path) .. "Reactor/")
					if bmd.direxists(path) == false then
						bmd.createdir(path)
						print("[Created Reactor Folder] " .. path)
					end

					print("[Show Reactor Folder] " .. path)
					bmd.openfileexternal("Open", path)
				]=],
			},
		},
	},
	Action
	{
		ID = "Reactor_Config_Folder",
		Category = "Reactor",
		Name = "Show Config Folder",

		Targets =
		{
			Composition =
			{
				Execute = _Lua [=[
					local path = app:MapPath("Config:/")
					if bmd.direxists(path) == false then
						bmd.createdir(path)
						print("[Created Reactor Folder] " .. path)
					end

					print("[Show Config Folder] " .. path)
					bmd.openfileexternal("Open", path)
				]=],
			},
		},
	},
	Action {
		ID = "Reactor_Resync",
		Category = "Reactor",
		Name = "Resync Repository",

		Targets = {
			Composition = {
				Execute = _Lua [=[
					local reactor_pathmap = os.getenv("REACTOR_INSTALL_PATHMAP") or "AllData:"
					local scriptPath = app:MapPath(tostring(reactor_pathmap) .. "Reactor/System/UI/ResyncRepository.lua")
					if bmd.fileexists(scriptPath) == false then
						print("[Reactor Error] Open the Reactor window once to download the missing file: " .. scriptPath)
					else
						target:RunScript(scriptPath)
					end
				]=],
			},
		},
	},
	Action
	{
		ID = "Resources_Reactor_Online_Repository",
		Category = "Reactor",
		Name = "Reactor Online Repository",

		Targets =
		{
			Composition =
			{
				Execute = _Lua [=[
					platform = (FuPLATFORM_WINDOWS and "Windows") or (FuPLATFORM_MAC and "Mac") or (FuPLATFORM_LINUX and "Linux")
					function OpenURL(siteName, path)
						if platform == "Windows" then
							-- Running on Windows
							command = "explorer \"" .. path .. "\""
						elseif platform == "Mac" then
							-- Running on Mac
							command = "open \"" .. path .. "\" &"
						 elseif platform == "Linux" then
							-- Running on Linux
							command = "xdg-open \"" .. path .. "\" &"
						else
							print("[Error] There is an invalid Fusion platform detected")
							return
						end
						os.execute(command)
						-- print("[Launch Command] ", command)
						print("[Opening URL] [" .. siteName .. "] " .. path)
					end

					OpenURL("Reactor Online Repository", "https://gitlab.com/WeSuckLess/Reactor")
				]=],
			},
		},
	},
	Action
	{
		ID = "Resources_Online_Discussion",
		Category = "Reactor",
		Name = "Reactor Online Discussion",

		Targets =
		{
			Composition =
			{
				Execute = _Lua [=[
					platform = (FuPLATFORM_WINDOWS and "Windows") or (FuPLATFORM_MAC and "Mac") or (FuPLATFORM_LINUX and "Linux")
					function OpenURL(siteName, path)
						if platform == "Windows" then
							-- Running on Windows
							command = "explorer \"" .. path .. "\""
						elseif platform == "Mac" then
							-- Running on Mac
							command = "open \"" .. path .. "\" &"
						elseif platform == "Linux" then
							-- Running on Linux
							command = "xdg-open \"" .. path .. "\" &"
						else
							print("[Error] There is an invalid Fusion platform detected")
							return
						end
						os.execute(command)
						-- print("[Launch Command] ", command)
						print("[Opening URL] [" .. siteName .. "] " .. path)
					end

					OpenURL("Reactor Online Discussion", "https://www.steakunderwater.com/wesuckless/viewforum.php?f=32")
				]=],
			},
		},
	},
	Action
	{
		ID = "Resources_WSL",
		Category = "Reactor",
		Name = "We Suck Less",

		Targets =
		{
			Composition =
			{
				Execute = _Lua [=[
					platform = (FuPLATFORM_WINDOWS and "Windows") or (FuPLATFORM_MAC and "Mac") or (FuPLATFORM_LINUX and "Linux")
					function OpenURL(siteName, path)
						if platform == "Windows" then
							-- Running on Windows
							command = "explorer \"" .. path .. "\""
						elseif platform == "Mac" then
							-- Running on Mac
							command = "open \"" .. path .. "\" &"
						 elseif platform == "Linux" then
							-- Running on Linux
							command = "xdg-open \"" .. path .. "\" &"
						else
							print("[Error] There is an invalid Fusion platform detected")
							return
						end
						os.execute(command)
						-- print("[Launch Command] ", command)
						print("[Opening URL] [" .. siteName .. "] " .. path)
					end

					OpenURL("We Suck Less", "https://www.steakunderwater.com/")
				]=],
			},
		},
	},
	Action
	{
		ID = "Resources_Bug_Tracker",
		Category = "Reactor",
		Name = "Bug Tracker",

		Targets =
		{
			Composition =
			{
				Execute = _Lua [=[
					platform = (FuPLATFORM_WINDOWS and "Windows") or (FuPLATFORM_MAC and "Mac") or (FuPLATFORM_LINUX and "Linux")
					function OpenURL(siteName, path)
						if platform == "Windows" then
							-- Running on Windows
							command = "explorer \"" .. path .. "\""
						elseif platform == "Mac" then
							-- Running on Mac
							command = "open \"" .. path .. "\" &"
						 elseif platform == "Linux" then
							-- Running on Linux
							command = "xdg-open \"" .. path .. "\" &"
						else
							print("[Error] There is an invalid Fusion platform detected")
							return
						end
						os.execute(command)
						-- print("[Launch Command] ", command)
						print("[Opening URL] [" .. siteName .. "] " .. path)
					end

					OpenURL("Bug Tracker", "https://www.steakunderwater.com/wesuckless/viewforum.php?f=19")
				]=],
			},
		},
	},
	Action
	{
		ID = "Reactor_About",
		Category = "Reactor",
		Name = "About Reactor",

		Targets =
		{
			Composition =
			{
				Execute = _Lua [=[
					local reactor_pathmap = os.getenv("REACTOR_INSTALL_PATHMAP") or "AllData:"
					local scriptPath = app:MapPath(tostring(reactor_pathmap) .. "Reactor/System/UI/AboutWindow.lua")
					if bmd.fileexists(scriptPath) == false then
						print("[Reactor Error] Open the Reactor window once to download the missing file: " .. scriptPath)
					else
						target:RunScript(scriptPath)
					end
				]=],
			},
		},
	},
	Menus
	{
		Target = "ChildFrame",

		Before "Help"
		{
			Sub "Reactor"
			{
				"Reactor_Open{}",
				"_",
				Sub "Advanced" {
				  "Reactor_Atomizer{}",
				  "_",
					"Reactor_Folder{}",
					"Reactor_Config_Folder{}",
					"_",
					"Reactor_Resync{}",
				},
				"_",
				Sub "Resources"
				{
					"Resources_Reactor_Online_Repository{}",
					"Resources_Online_Discussion{}",
					"_",
					"Resources_WSL{}",
					"Resources_Bug_Tracker{}",
				},
				"_",
				"Reactor_About{}",
			},
		},
	},
}
